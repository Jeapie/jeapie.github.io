{
    "docs": [
        {
            "location": "/",
            "text": "DOCUMENTATION\n\n\n\nGetting Started\n\n\nIOS\n\n\n\n\n\niOS Native SDK Overview\n\n\nGenerating an iOS Push Certificate\n\n\niOS Native SDK Installation\n\n\niOS Native SDK API\n\n\n\n\nANDROID\n\n\n\n\n\nAndroid Native SDK Overview\n\n\nAndroid - Generating a GCM Push Notification Key\n\n\nAndroid Native SDK Installation\n\n\nAndroid Native SDK API\n\n\nAndroid Notification Customizations\n\n\n\n\nWEBSITES\n\n\n\n\n\nWebsite SDK Overview\n\n\nWebsite - Generating a GCM Push Notification Key\n\n\nWebsite SDK HTTPS Installation\n\n\nWebsite SDK HTTP Installation\n\n\nWebsite SDK API\n\n\n\n\nSERVER API\n\n\n\n\n\nServer API Overview\n\n\nnotifications (View notifications)\n\n\nget/notifications/:id (View notification)\n\n\nput/notifications/:id (Track open)\n\n\npost/notifications (Create Notification)\n\n\ndelete/notifications/:id (Cancel notification)\n\u02d9",
            "title": "Home"
        },
        {
            "location": "/Getting-Started/",
            "text": "Getting Started\n\n\n\nWhat is Jeapie?\n\n\n\nJeapie is a simple and reliable push notification system built for mobile and web applications. Jeapie supports all major mobile app development platforms.\n\n\nSetup Instructions\n\n\n\nGet started by selecting your platform below:\n\n\n\n\n\n\n\n\nPlatform\n\n\nSetup Instructions\n\n\n\n\n\n\n\n\n\n\nNative Android\n\n\nUsing Jeapie in your Android App\n\n\n\n\n\n\nChrome Web Notifications\n\n\nUsing Jeapie Push on your Website\n\n\n\n\n\n\nImplement your own plugin\n\n\nUsing the Jeapie Server API\n\n\n\n\n\n\nNone of the above\n\n\nContact us at \nsupport@jeapie.com\n and we'll help get you running.",
            "title": "Getting Started"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/",
            "text": "Android Native SDK Overview\n\n\nTo get Jeapie Push Notifications running on Android, follow these two steps:\n\n\nStep 1\n\n\nGenerate a GCM API Key\n\n\nStep 2\n\n\nInstall the Jeapie Android SDK",
            "title": "Android Native SDK Overview"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#android-native-sdk-overview",
            "text": "To get Jeapie Push Notifications running on Android, follow these two steps:",
            "title": "Android Native SDK Overview"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#step-1",
            "text": "Generate a GCM API Key",
            "title": "Step 1"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#step-2",
            "text": "Install the Jeapie Android SDK",
            "title": "Step 2"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/",
            "text": "Android - Generating a GCM Push Notification Key\n\n\nConnect your Google Cloud Messenger Android app with Jeapie\n\n\nSTEP 1: Create a Google Project and save the \"Project Number\"\n\n\n1.1\n Create a project at \nhttps://console.developers.google.com/project\n for your app.\n\n\n\n\n1.2\n Select your Project and click on \"Overview.\" Your project number should be located on this page.\n\n\n\n\nCopy the \"Project Number\" from this page.\n\n\nYou will need to enter this into your app later when you follow the SDK guide.\n\n\nSTEP 2: Turn on \"Google Cloud Messaging for Android\" API\n\n\n2.\n Under APIs \n auth\nAPIs, search for \"Google Cloud Messaging for Android.\" Turn it on.\n\n\n\n\n\n\nSTEP 3: Create and save Server Key\n\n\n3.1\n Under \"APIs \n auth\" \n \"Credentials\", Click \"CREATE NEW KEY\".\n\n\n3.2\n Select \"Server key\"\n\n\n\n\n\n\n3.3\n Press the Create button.\n\n\nIMPORTANT\n\n\nDO NOT enter anything into the box.\n\n\n\n\n3.4\n Copy the \"API Key.\" You will need it to configure your project with Jeapie\n\n\n\n\nSTEP 4: Configure your Android App with Jeapie\n\n\n4.1\n Log into Jeapie. In the dashboard, select \"Application Settings\" then press the \"Configure\" button to the right of \"Google Play (GCM)\".\n\n\n\n\n\n\n4.2\n Paste your Google API Key in here and press Save.\n\n\n\n\nConfiguration to send Android push notifications is complete!\n\n\nNext step is to \nset up the Android SDK",
            "title": "Android - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#android-generating-a-gcm-push-notification-key",
            "text": "Connect your Google Cloud Messenger Android app with Jeapie",
            "title": "Android - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-1-create-a-google-project-and-save-the-project-number",
            "text": "1.1  Create a project at  https://console.developers.google.com/project  for your app.   1.2  Select your Project and click on \"Overview.\" Your project number should be located on this page.   Copy the \"Project Number\" from this page.  You will need to enter this into your app later when you follow the SDK guide.",
            "title": "STEP 1: Create a Google Project and save the \"Project Number\""
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-2-turn-on-google-cloud-messaging-for-android-api",
            "text": "2.  Under APIs   auth APIs, search for \"Google Cloud Messaging for Android.\" Turn it on.",
            "title": "STEP 2: Turn on \"Google Cloud Messaging for Android\" API"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-3-create-and-save-server-key",
            "text": "3.1  Under \"APIs   auth\"   \"Credentials\", Click \"CREATE NEW KEY\".  3.2  Select \"Server key\"    3.3  Press the Create button.  IMPORTANT  DO NOT enter anything into the box.   3.4  Copy the \"API Key.\" You will need it to configure your project with Jeapie",
            "title": "STEP 3: Create and save Server Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-4-configure-your-android-app-with-jeapie",
            "text": "4.1  Log into Jeapie. In the dashboard, select \"Application Settings\" then press the \"Configure\" button to the right of \"Google Play (GCM)\".    4.2  Paste your Google API Key in here and press Save.   Configuration to send Android push notifications is complete!  Next step is to  set up the Android SDK",
            "title": "STEP 4: Configure your Android App with Jeapie"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/",
            "text": "Android Native SDK Installation\n\n\nFirst, you will need to import the required libraries.\n\n\n'Google Play services' \n 'Android Support Library'\n\n\nJeapie requires Google Play services(google-play-services_lib) and Android Support Library v4(android-support-v4.jar). android-support-v13.jar can be used instead if your project already requires it.\n\n\n1.\n Download the latest \nJeapie Android SDK\n.\n\n\n2.\n Copy google-play-services_lib from \n\\extras\\google\\google_play_services\\libproject\\ to anywhere else but the Eclipse workspace folder. Also make the file \n\\extras\\android\\support\\v4\\android-support-v4.jar exists as you will need to copy it to your libs folder in the steps below. If your missing either one run the Android SDK Manager and install them from the Extras section.\n\n\n\"SDK Path:\" is shown on this window, replace \n with your path in the steps.\n\n\n\n\n3.\n Import google-play-services_lib project into your workspace. Go to File\nImport and then go to Android\nExisting Android Code into Workspace.\n\n\n\n\n\n\n4.\n Right click on your project and go to Properties. On the left Select Android and then press the \"Add...\" button in Library section. Pick the google-play-services_lib.\n\n\n\n\n5.\n Next place Jeapiesdk.jar and android-support-v4.jar into your project's libs\n\n\n\n\n6.\n Right click on your project to go Properties and select \"Java Build Path\" on the left. Next click on the \"Order and Export\" tab and make sure \"Android Dependencies\" is checked.\n\n\n\n\nNext, you will need to add code to handle push notifications.\n\n\n1.\n Import Jeapie.\n\n\nimport com.Jeapie.Jeapie;\nimport com.Jeapie.Jeapie.NotificationOpenedHandler;\n\n\n\n\n2.\n Add the following to the onCreate method on your main activity. Update with your Google Project number and Jeapie app id.\n\n\n// Pass in your app's Context, Google Project number, your Jeapie App ID, and NotificationOpenedHandler\nJeapie.init(this, \n703322744261\n, \n5eb5a37e-b458-11e3-ac11-000c2940e62c\n, new ExampleNotificationOpenedHandler());\n\n\n\n\n3.\n Add the following private class in your activity. (or in its own class file).\n\n\n// NotificationOpenedHandler is implemented in its own class instead of adding implements to MainActivity so we don't hold on to a reference of our first activity if it gets recreated.\nprivate class ExampleNotificationOpenedHandler implements NotificationOpenedHandler {\n  /**\n   * Callback to implement in your app to handle when a notification is opened from the Android status bar or\n   * a new one comes in while the app is running.\n   * This method is located in this activity as an example, you may have any class you wish implement NotificationOpenedHandler and define this method.\n   *\n   * @param message        The message string the user seen/should see in the Android status bar.\n   * @param additionalData The additionalData key value pair section you entered in on jeapie.com.\n   * @param isActive       Was the app in the foreground when the notification was received.\n   */\n  @Override\n  public void notificationOpened(String message, JSONObject additionalData, boolean isActive) {\n    String messageTitle = \nJeapie Example\n, messageBody = message;\n\n    try {\n      if (additionalData != null) {\n        if (additionalData.has(\ntitle\n))\n          messageTitle = additionalData.getString(\ntitle\n);\n        if (additionalData.has(\nactionSelected\n))\n          messageBody += \n\\nPressed ButtonID: \n + additionalData.getString(\nactionSelected\n);\n\n        messageBody = message + \n\\n\\nFull additionalData:\\n\n + additionalData.toString();\n      }\n    } catch (JSONException e) {\n    }\n\n    new AlertDialog.Builder(MainActivity.currentActivity)\n                   .setTitle(messageTitle)\n                   .setMessage(messageBody)\n                   .setCancelable(true)\n                   .setPositiveButton(\nOK\n, null)\n                   .create().show();\n  }\n}\n\n\n\n\n4.\n Add the following onPause and onResume methods to all your Activities. This is recommend so just the notificationOpened method is called instead of getting a notification when the user is already in your app.\n\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    Jeapie.onPaused();\n}\n@Override\nprotected void onResume() {\n    super.onResume();\n    Jeapie.onResumed();\n}\n\n\n\n\n5.\n Add the following permissions to AndroidManifest.xml.\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\nuses-permission android:name=\ncom.google.android.c2dm.permission.RECEIVE\n /\n\n\npermission android:name=\nCOM.YOUR.PACKAGE_NAME.permission.C2D_MESSAGE\n android:protectionLevel=\nsignature\n /\n\n\nuses-permission android:name=\nCOM.YOUR.PACKAGE_NAME.permission.C2D_MESSAGE\n /\n\n\n\n\n\n6.\n In the application tag add the following.\n\n\napplication ....\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n           android:value=\n@integer/google_play_services_version\n /\n\n        \nactivity android:name=\ncom.Jeapie.NotificationOpenedActivity\n/\n\n        \nreceiver\n         android:name=\ncom.Jeapie.GcmBroadcastReceiver\n\n         android:permission=\ncom.google.android.c2dm.permission.SEND\n \n\n            \nintent-filter\n\n                \naction android:name=\ncom.google.android.c2dm.intent.RECEIVE\n /\n\n                \ncategory android:name=\nCOM.YOUR.PACKAGE_NAME\n /\n\n            \n/intent-filter\n\n        \n/receiver\n\n        \nservice android:name=\ncom.Jeapie.GcmIntentService\n /\n\n\n/application\n\n\n\n\n\n7.\n Replace all 3 of instances \nCOM.YOUR.PACKAGE_NAME\n with your package name in AndroidManifest.xml.\n\n\nProguard\n\n\nIf you have proguard enabled on your project you must add the following line to your proguard config file. (Default name is proguard-project.txt).\n\n\n\n\n-dontwarn com.Jeapie.**\n\n\n-dontwarn com.gamethrive.**\n\n\n\n\nThat is it for the Eclipse setup!\n\n\nThe Android emulator doesn't support push notifications so you must test on a device. If you haven't done so already, make sure your \nGoogle API key\n is configured in Jeapie so you can send notifications out.\n\n\nAdditional Documentation\n\n\n\n\nHighly recommend following at least our \nSmall Notification Icon\n instructions to make sure your notification icon displays correctly.\n\n\nTo see all available methods, see our \nAndroid SDK API Documentation\n.",
            "title": "Android Native SDK Installation"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/#android-native-sdk-installation",
            "text": "",
            "title": "Android Native SDK Installation"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/#first-you-will-need-to-import-the-required-libraries",
            "text": "'Google Play services'   'Android Support Library'  Jeapie requires Google Play services(google-play-services_lib) and Android Support Library v4(android-support-v4.jar). android-support-v13.jar can be used instead if your project already requires it.  1.  Download the latest  Jeapie Android SDK .  2.  Copy google-play-services_lib from  \\extras\\google\\google_play_services\\libproject\\ to anywhere else but the Eclipse workspace folder. Also make the file  \\extras\\android\\support\\v4\\android-support-v4.jar exists as you will need to copy it to your libs folder in the steps below. If your missing either one run the Android SDK Manager and install them from the Extras section.  \"SDK Path:\" is shown on this window, replace   with your path in the steps.   3.  Import google-play-services_lib project into your workspace. Go to File Import and then go to Android Existing Android Code into Workspace.    4.  Right click on your project and go to Properties. On the left Select Android and then press the \"Add...\" button in Library section. Pick the google-play-services_lib.   5.  Next place Jeapiesdk.jar and android-support-v4.jar into your project's libs   6.  Right click on your project to go Properties and select \"Java Build Path\" on the left. Next click on the \"Order and Export\" tab and make sure \"Android Dependencies\" is checked.",
            "title": "First, you will need to import the required libraries."
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/#next-you-will-need-to-add-code-to-handle-push-notifications",
            "text": "1.  Import Jeapie.  import com.Jeapie.Jeapie;\nimport com.Jeapie.Jeapie.NotificationOpenedHandler;  2.  Add the following to the onCreate method on your main activity. Update with your Google Project number and Jeapie app id.  // Pass in your app's Context, Google Project number, your Jeapie App ID, and NotificationOpenedHandler\nJeapie.init(this,  703322744261 ,  5eb5a37e-b458-11e3-ac11-000c2940e62c , new ExampleNotificationOpenedHandler());  3.  Add the following private class in your activity. (or in its own class file).  // NotificationOpenedHandler is implemented in its own class instead of adding implements to MainActivity so we don't hold on to a reference of our first activity if it gets recreated.\nprivate class ExampleNotificationOpenedHandler implements NotificationOpenedHandler {\n  /**\n   * Callback to implement in your app to handle when a notification is opened from the Android status bar or\n   * a new one comes in while the app is running.\n   * This method is located in this activity as an example, you may have any class you wish implement NotificationOpenedHandler and define this method.\n   *\n   * @param message        The message string the user seen/should see in the Android status bar.\n   * @param additionalData The additionalData key value pair section you entered in on jeapie.com.\n   * @param isActive       Was the app in the foreground when the notification was received.\n   */\n  @Override\n  public void notificationOpened(String message, JSONObject additionalData, boolean isActive) {\n    String messageTitle =  Jeapie Example , messageBody = message;\n\n    try {\n      if (additionalData != null) {\n        if (additionalData.has( title ))\n          messageTitle = additionalData.getString( title );\n        if (additionalData.has( actionSelected ))\n          messageBody +=  \\nPressed ButtonID:   + additionalData.getString( actionSelected );\n\n        messageBody = message +  \\n\\nFull additionalData:\\n  + additionalData.toString();\n      }\n    } catch (JSONException e) {\n    }\n\n    new AlertDialog.Builder(MainActivity.currentActivity)\n                   .setTitle(messageTitle)\n                   .setMessage(messageBody)\n                   .setCancelable(true)\n                   .setPositiveButton( OK , null)\n                   .create().show();\n  }\n}  4.  Add the following onPause and onResume methods to all your Activities. This is recommend so just the notificationOpened method is called instead of getting a notification when the user is already in your app.  @Override\nprotected void onPause() {\n    super.onPause();\n    Jeapie.onPaused();\n}\n@Override\nprotected void onResume() {\n    super.onResume();\n    Jeapie.onResumed();\n}  5.  Add the following permissions to AndroidManifest.xml.  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WAKE_LOCK  /  uses-permission android:name= android.permission.VIBRATE  /  uses-permission android:name= com.google.android.c2dm.permission.RECEIVE  /  permission android:name= COM.YOUR.PACKAGE_NAME.permission.C2D_MESSAGE  android:protectionLevel= signature  /  uses-permission android:name= COM.YOUR.PACKAGE_NAME.permission.C2D_MESSAGE  /   6.  In the application tag add the following.  application .... \n     meta-data android:name= com.google.android.gms.version \n           android:value= @integer/google_play_services_version  / \n         activity android:name= com.Jeapie.NotificationOpenedActivity / \n         receiver\n         android:name= com.Jeapie.GcmBroadcastReceiver \n         android:permission= com.google.android.c2dm.permission.SEND   \n             intent-filter \n                 action android:name= com.google.android.c2dm.intent.RECEIVE  / \n                 category android:name= COM.YOUR.PACKAGE_NAME  / \n             /intent-filter \n         /receiver \n         service android:name= com.Jeapie.GcmIntentService  /  /application   7.  Replace all 3 of instances  COM.YOUR.PACKAGE_NAME  with your package name in AndroidManifest.xml.  Proguard  If you have proguard enabled on your project you must add the following line to your proguard config file. (Default name is proguard-project.txt).   -dontwarn com.Jeapie.**  -dontwarn com.gamethrive.**   That is it for the Eclipse setup!  The Android emulator doesn't support push notifications so you must test on a device. If you haven't done so already, make sure your  Google API key  is configured in Jeapie so you can send notifications out.  Additional Documentation   Highly recommend following at least our  Small Notification Icon  instructions to make sure your notification icon displays correctly.  To see all available methods, see our  Android SDK API Documentation .",
            "title": "Next, you will need to add code to handle push notifications."
        },
        {
            "location": "/Android/Android-Native-SDK-API/",
            "text": "Android Native SDK API\n\n\nList of Constructors\n\n\nJeapie\n\n\nList of Methods\n\n\n\n\nsendTag\n\n\nsendTags\n\n\ngetTags\n\n\ndeleteTag\n\n\ndeleteTags\n\n\nsendPurchase\n\n\nIdsAvailable\n\n\nonPaused\n\n\nonResumed\n\n\nenableVibrate\n\n\nenableSound\n\n\n\n\nList of Handler Interfaces\n\n\n\n\nNotificationOpenedHandler\n\n\nIdsAvailableHandler\n\n\nGetTagsHandler\n\n\n\n\nConstructors\n\n\nJeapie\n\n\nYou must create a Jeapie instance on the first Android Activity when your app starts. Also make sure you only create one instance and keep the same one around by making it static our assigning it to an object outside of your first Activity. You are also required to override onPaused and onResumed on your Android Activities and call the matching methods on your Jeapie instance.\n\n\n\n\nParameters\n\n\nActivity\n \ncontext\n - Pass in your main \nActivity\n so the api can use it as a \nContext\n.\n\n\nString\n \ngoogle Project Number\n - Your Google project number\n\n\nString\n \nJeapie AppId\n - Your Jeapie app id\n\n\nNotificationOpenedHandler\n \nnotificationOpenedHandler(Optional)\n - Calls \nnotificationOpened\n on the object when a notification is opened or one is received while the app is running.\n\n\n\n\nExample\n\n\npublic class MainActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      Jeapie = new Jeapie(this, \n703322744261\n, \n5eb5a37e-b458-11e3-ac11-000c2940e62c\n);\n    }\n  }\n\n\n\n\nMethods\n\n\nsendTag\n\n\nTag a user based on an app event of your choosing so later you can create segments on \njeapie.com\n to target these users. Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.\n\n\n\n\nParameters\n\n\nString\n \nkey\n - Key of your choosing to create or update.\n\n\nString\n \nvalue\n - Value to set on the key.\n\n\nNOTE\n: Passing in a blank String deletes the key, you can also call deleteTag or deleteTags.\n\n\n\n\nExample\n\n\nJeapie.sendTag(\nkey\n, \nvalue\n);\n\n\n\n\nsendTags\n\n\nTag a user based on an app event of your choosing so later you can create segments on \njeapie.com\n to target these users.\n\n\n\n\nParameters\n\n\nJSONObject\n \nkeyValues\n - Key value pairs of your choosing to create or update.\n\n\nNOTE\n: Passing in a blank String as a value deletes the key, you can also call deleteTag or deleteTags.\n\n\n\n\nExample\n\n\n  JSONObject tags = new JSONObject();\n  tags.put(\nkey1\n, \nvalue1\n);\n  tags.put(\nkey2\n, \nvalue2\n);\n  Jeapie.sendTags(tags);\n\n\n\n\ngetTags\n\n\nRetrieve a list of tags that have been set on the user from the Jeapie server.\n\n\n\n\nParameters\n\n\nGetTagsHandler\n \nhandler\n - Calls \ntagsAvailable\n on the Object once the tags are available.\n\n\n\n\nExample\n\n\nJeapie.getTags(new GetTagsHandler() {\n    @Override\n    public void tagsAvailable(JSONObject tags) {\n      Log.d(\ndebug\n, tags.toString());\n    }\n  });\n\n\n\n\ndeleteTag\n\n\nDeletes a tag that was previously set on a user with \nsendTag\n or \nsendTags\n. Use \ndeleteTags\n if you need to delete more than one.\n\n\n\n\nParameters\n\n\nString\n \nkey\n - Key to remove.\n\n\n\n\nExample\n\n\nJeapie.deleteTag(\nkey\n);\n\n\n\n\ndeleteTags\n\n\nDeletes tags that were previously set on a user with \nsendTag\n or \nsendTags\n.\n\n\n\n\nParameters\n\n\nCollection\nString\n \nkeys\n - Keys to remove.\n\n\n\n\nExample\n\n\nCollection\nString\n tempList = new ArrayList\nString\n();\n  tempList.add(key);\n  Jeapie.deleteTags(tempList);\n\n\n\n\n~~sendPurchase~~\n\n\nThis was deprecated in version 1.4.0 as Google Play and Amazon (IAP v2) purchases are now automatically tracked for you.\n\n\n~~Call this method when a user completes an in-app purchase, and provide the amount spent in USD. This can later be used to target free vs paid users when sending a push notification.~~\n\n\n\n\n~~Parameters~~\n\n\n\n\n~~(BigDecimal OR double) amount - Amount spent in USD.~~\n\n\n\n\n\n\n~~Example~~\n\n\n\n\n\n\n// This method call as no affect as purchases are now tracked automatically.\nJeapie.sendPurchase(1.23d);\n\n\n\n\nidsAvailable\n\n\nLets you retrieve the Jeapie user id and the Google registration id. Your handler is called after the device is successfully registered with Jeapie.\n\n\n\n\nParameters\n\n\nIdsAvailableHandler\n \nhandler\n - Calls \ntagsAvailable\n on the Object when the user id is available.\n\n\n\n\nExample\n\n\nJeapie.idsAvailable(new IdsAvailableHandler() {\n    @Override\n    public void idsAvailable(String userId, String registrationId) {\n      Log.d(\ndebug\n, \nUser:\n + userId);\n      if (registrationId != null)\n        Log.d(\ndebug\n, \nregistrationId:\n + registrationId);\n    }\n  });\n\n\n\n\nonPaused\n\n\nTells Jeapie that the user is no longer in your app. This is used to track session duration of your app and when to show a notification in the notification area or to just call your \nNotificationOpenedHandler\n. So make sure to place this and \nonResume\n in each of your \nActivity\n classes.\n\n\nExample\n\n\n  @Override\n  protected void onPause() {\n    super.onPause();\n    Jeapie.onPaused();\n  }\n\n\n\n\nonResumed\n\n\nTells Jeapie that the user returned to your app. This is used to track session duration of your app and when to show a notification in the notification area or to just call your \nNotificationOpenedHandler\n. So make sure to place this and \nonPaused\n in each of your \nActivity\n classes.\n\n\nExample\n\n\n@Override\n  protected void onResume() {\n    super.onResume();\n    Jeapie.onResumed();\n  }\n\n\n\n\nenableVibrate\n\n\nYou can call this from your UI from a button press for example to give your user's options for your notifications.\n\n\nBy default Jeapie always vibrates the device when a notification is displayed unless the device is in a total silent mode. Passing false means that the device will only vibrate lightly when the device is in it's vibrate only mode.\n\n\nExample\n\n\nJeapie.enableVibrate(false);\n\n\n\n\nenableSound\n\n\nYou can call this from your UI from a button press for example to give your user's options for your notifications.\n\n\nBy default Jeapie plays the system's default notification sound when the device's notification system volume is turned on. Passing false means that the device will only vibrate unless the device is set to a total silent mode.\n\n\nExample\n\n\nJeapie.enableSound(false);\n\n\n\n\nHandler Interfaces\n\n\nNotificationOpenedHandler\n\n\nInterface containing the method \nnotificationOpened\n which you can implement to process information on the notification the user just opened.\n\n\nnotificationOpened\n\n\n\n\nParameters\n\n\nString\n \nmessage\n - The message text the user seen in the notification.\n\n\nJSONObject\n \nadditionalData\n - Key value pairs that were set on the notification.\n\n\nboolean\n \nisActive\n - True if your app was currently being used when a notification came in.\n\n\n\n\nNOTE\n\n\nIf you set Action Buttons on your notification, the actionSelected key will contain the id of the button pressed; \"\nDEFAULT\n\" will be the id if the user tapped on the notification itself when buttons were present.\n\n\nExample\n\n\n@Override\n  public static void notificationOpened(String message, JSONObject additionalData, boolean isActive) {\n    String messageTitle;\n    AlertDialog.Builder builder = null;\n\n    if (additionalData != null) {\n      if (additionalData.has(\ndiscount\n))\n        messageTitle = \nDiscount!\n;\n      else if (additionalData.has(\nbonusCredits\n))\n        messageTitle = \nBonus Credits!\n;\n      else\n        messageTitle = \nOther Extra Data\n;\n\n      builder = new AlertDialog.Builder(this)\n          .setTitle(messageTitle)\n          .setMessage(message + \n\\n\\n\n + additionalData.toString());\n    }\n    else if (isActive) // If a push notification is received when the app is being used it does not display in the notification bar so display in the app.\n      builder = new AlertDialog.Builder(this)\n          .setTitle(\nJeapie Message\n)\n          .setMessage(message);\n\n    // Add your app logic around this so the user is not interrupted during gameplay.\n    if (builder != null)\n      builder.setCancelable(true)\n           .setPositiveButton(\nOK\n,null)\n           .create().show();\n  }\n\n\n\n\nIf want to process a notification before it is clicked or want to handle receiving a silent notification see our \nBackground Data documentation\n.\n\n\nIdsAvailableHandler\n\n\nInterface which you can implement and pass to \nJeapie.idsAvailable\n to get the Jeapie userId and the Google registration Id.\n\n\nIdsAvailable\n\n\n\n\nParameters\n\n\nString\n \nuserId\n - Jeapie userId is a UUID formatted string.(\nunique per device per app\n)\n\n\nString\n \nregistrationId\n - Registration Id is a Google assigned identifier(\nunique per device per app and changes on reinstalls\n).\n\n\n\n\nNOTE\n\n\nMight be \nnull\n if Google play services are not installed on the device or there was a connection issue.\n\n\nExample\n\n\nJeapie.idsAvailable(new IdsAvailableHandler() {\n     @Override\n     public void idsAvailable(String userId, String registrationId) {\n      Log.d(\ndebug\n, \nUser:\n + userId);\n      if (registrationId != null)\n        Log.d(\ndebug\n, \nregistrationId:\n + registrationId);\n     }\n  });\n\n\n\n\nGetTagsHandler\n\n\nInterface which you can implement and pass to \nJeapie.getTags\n to get the all the tags set on a user from jeapie.com.\n\n\ntagsAvailable\n\n\n\n\nParameters\n\n\nJSONObject\n \ntags\n - JSONObject of key value pairs retrieved from the Jeapie server\n\n\n\n\nExample\n\n\nJeapie.getTags(new GetTagsHandler() {\n    @Override\n    public void tagsAvailable(JSONObject tags) {\n      Log.d(\ndebug\n,\nCurrent Tags on User:\n + tags.toString());\n    }\n  });",
            "title": "Android Native SDK API"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#android-native-sdk-api",
            "text": "",
            "title": "Android Native SDK API"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#list-of-constructors",
            "text": "Jeapie",
            "title": "List of Constructors"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#list-of-methods",
            "text": "sendTag  sendTags  getTags  deleteTag  deleteTags  sendPurchase  IdsAvailable  onPaused  onResumed  enableVibrate  enableSound",
            "title": "List of Methods"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#list-of-handler-interfaces",
            "text": "NotificationOpenedHandler  IdsAvailableHandler  GetTagsHandler",
            "title": "List of Handler Interfaces"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#constructors",
            "text": "Jeapie  You must create a Jeapie instance on the first Android Activity when your app starts. Also make sure you only create one instance and keep the same one around by making it static our assigning it to an object outside of your first Activity. You are also required to override onPaused and onResumed on your Android Activities and call the matching methods on your Jeapie instance.   Parameters  Activity   context  - Pass in your main  Activity  so the api can use it as a  Context .  String   google Project Number  - Your Google project number  String   Jeapie AppId  - Your Jeapie app id  NotificationOpenedHandler   notificationOpenedHandler(Optional)  - Calls  notificationOpened  on the object when a notification is opened or one is received while the app is running.   Example  public class MainActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      Jeapie = new Jeapie(this,  703322744261 ,  5eb5a37e-b458-11e3-ac11-000c2940e62c );\n    }\n  }",
            "title": "Constructors"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#methods",
            "text": "sendTag  Tag a user based on an app event of your choosing so later you can create segments on  jeapie.com  to target these users. Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.   Parameters  String   key  - Key of your choosing to create or update.  String   value  - Value to set on the key.  NOTE : Passing in a blank String deletes the key, you can also call deleteTag or deleteTags.   Example  Jeapie.sendTag( key ,  value );  sendTags  Tag a user based on an app event of your choosing so later you can create segments on  jeapie.com  to target these users.   Parameters  JSONObject   keyValues  - Key value pairs of your choosing to create or update.  NOTE : Passing in a blank String as a value deletes the key, you can also call deleteTag or deleteTags.   Example    JSONObject tags = new JSONObject();\n  tags.put( key1 ,  value1 );\n  tags.put( key2 ,  value2 );\n  Jeapie.sendTags(tags);  getTags  Retrieve a list of tags that have been set on the user from the Jeapie server.   Parameters  GetTagsHandler   handler  - Calls  tagsAvailable  on the Object once the tags are available.   Example  Jeapie.getTags(new GetTagsHandler() {\n    @Override\n    public void tagsAvailable(JSONObject tags) {\n      Log.d( debug , tags.toString());\n    }\n  });  deleteTag  Deletes a tag that was previously set on a user with  sendTag  or  sendTags . Use  deleteTags  if you need to delete more than one.   Parameters  String   key  - Key to remove.   Example  Jeapie.deleteTag( key );  deleteTags  Deletes tags that were previously set on a user with  sendTag  or  sendTags .   Parameters  Collection String   keys  - Keys to remove.   Example  Collection String  tempList = new ArrayList String ();\n  tempList.add(key);\n  Jeapie.deleteTags(tempList);  ~~sendPurchase~~  This was deprecated in version 1.4.0 as Google Play and Amazon (IAP v2) purchases are now automatically tracked for you.  ~~Call this method when a user completes an in-app purchase, and provide the amount spent in USD. This can later be used to target free vs paid users when sending a push notification.~~   ~~Parameters~~   ~~(BigDecimal OR double) amount - Amount spent in USD.~~    ~~Example~~    // This method call as no affect as purchases are now tracked automatically.\nJeapie.sendPurchase(1.23d);  idsAvailable  Lets you retrieve the Jeapie user id and the Google registration id. Your handler is called after the device is successfully registered with Jeapie.   Parameters  IdsAvailableHandler   handler  - Calls  tagsAvailable  on the Object when the user id is available.   Example  Jeapie.idsAvailable(new IdsAvailableHandler() {\n    @Override\n    public void idsAvailable(String userId, String registrationId) {\n      Log.d( debug ,  User:  + userId);\n      if (registrationId != null)\n        Log.d( debug ,  registrationId:  + registrationId);\n    }\n  });  onPaused  Tells Jeapie that the user is no longer in your app. This is used to track session duration of your app and when to show a notification in the notification area or to just call your  NotificationOpenedHandler . So make sure to place this and  onResume  in each of your  Activity  classes.  Example    @Override\n  protected void onPause() {\n    super.onPause();\n    Jeapie.onPaused();\n  }  onResumed  Tells Jeapie that the user returned to your app. This is used to track session duration of your app and when to show a notification in the notification area or to just call your  NotificationOpenedHandler . So make sure to place this and  onPaused  in each of your  Activity  classes.  Example  @Override\n  protected void onResume() {\n    super.onResume();\n    Jeapie.onResumed();\n  }  enableVibrate  You can call this from your UI from a button press for example to give your user's options for your notifications.  By default Jeapie always vibrates the device when a notification is displayed unless the device is in a total silent mode. Passing false means that the device will only vibrate lightly when the device is in it's vibrate only mode.  Example  Jeapie.enableVibrate(false);  enableSound  You can call this from your UI from a button press for example to give your user's options for your notifications.  By default Jeapie plays the system's default notification sound when the device's notification system volume is turned on. Passing false means that the device will only vibrate unless the device is set to a total silent mode.  Example  Jeapie.enableSound(false);",
            "title": "Methods"
        },
        {
            "location": "/Android/Android-Native-SDK-API/#handler-interfaces",
            "text": "NotificationOpenedHandler  Interface containing the method  notificationOpened  which you can implement to process information on the notification the user just opened.  notificationOpened   Parameters  String   message  - The message text the user seen in the notification.  JSONObject   additionalData  - Key value pairs that were set on the notification.  boolean   isActive  - True if your app was currently being used when a notification came in.   NOTE  If you set Action Buttons on your notification, the actionSelected key will contain the id of the button pressed; \" DEFAULT \" will be the id if the user tapped on the notification itself when buttons were present.  Example  @Override\n  public static void notificationOpened(String message, JSONObject additionalData, boolean isActive) {\n    String messageTitle;\n    AlertDialog.Builder builder = null;\n\n    if (additionalData != null) {\n      if (additionalData.has( discount ))\n        messageTitle =  Discount! ;\n      else if (additionalData.has( bonusCredits ))\n        messageTitle =  Bonus Credits! ;\n      else\n        messageTitle =  Other Extra Data ;\n\n      builder = new AlertDialog.Builder(this)\n          .setTitle(messageTitle)\n          .setMessage(message +  \\n\\n  + additionalData.toString());\n    }\n    else if (isActive) // If a push notification is received when the app is being used it does not display in the notification bar so display in the app.\n      builder = new AlertDialog.Builder(this)\n          .setTitle( Jeapie Message )\n          .setMessage(message);\n\n    // Add your app logic around this so the user is not interrupted during gameplay.\n    if (builder != null)\n      builder.setCancelable(true)\n           .setPositiveButton( OK ,null)\n           .create().show();\n  }  If want to process a notification before it is clicked or want to handle receiving a silent notification see our  Background Data documentation .  IdsAvailableHandler  Interface which you can implement and pass to  Jeapie.idsAvailable  to get the Jeapie userId and the Google registration Id.  IdsAvailable   Parameters  String   userId  - Jeapie userId is a UUID formatted string.( unique per device per app )  String   registrationId  - Registration Id is a Google assigned identifier( unique per device per app and changes on reinstalls ).   NOTE  Might be  null  if Google play services are not installed on the device or there was a connection issue.  Example  Jeapie.idsAvailable(new IdsAvailableHandler() {\n     @Override\n     public void idsAvailable(String userId, String registrationId) {\n      Log.d( debug ,  User:  + userId);\n      if (registrationId != null)\n        Log.d( debug ,  registrationId:  + registrationId);\n     }\n  });  GetTagsHandler  Interface which you can implement and pass to  Jeapie.getTags  to get the all the tags set on a user from jeapie.com.  tagsAvailable   Parameters  JSONObject   tags  - JSONObject of key value pairs retrieved from the Jeapie server   Example  Jeapie.getTags(new GetTagsHandler() {\n    @Override\n    public void tagsAvailable(JSONObject tags) {\n      Log.d( debug , Current Tags on User:  + tags.toString());\n    }\n  });",
            "title": "Handler Interfaces"
        },
        {
            "location": "/Android/Android-Notification-Customizations/",
            "text": "Android Notification Customizations\n\n\nHighly recommend following at least our Small Notification Icon instructions.\n\n\nSmall Notification Icon\n\n\nOur SDK automatically by default uses your App's launcher icon but we highly recommend following our instructions to create custom ones for the following reasons:\n\n\n\n\nSince the app icon is too large it will get cropped when the ticker text is showing on the status bar, however Android does scale the icon down to fit after the ticker text is done displaying.\n\n\nAndroid's Notification Icon Standards\n notes your small notification icon should be all white (grey on Android 2.3).\n\n\nStarting with Android 5 the OS forces the notification icon to be all white when your app targets Android API 21+. If you don't make a correct small icon it will most likely be displayed as a solid white square or circle in the status bar.\n\n\n\n\nTo quickly and easily generate small icons with the correct settings we recommend using the \nAndroid Asset Studio\n. Use \nic_stat_Jeapie_default\n as the name. Download and extract the res folder contains to your project and send out some test notifications to make sure it is working.\n\n\nIf you prefer to not use the Android Asset Studio please make your icon files in the following locations and sizes:\n\n\nAndroid 3.0 and higher.\n\n\nThese icons are expected to be entirely white.\n\n\n\n\nres/drawable-mdpi-v11/ic_stat_Jeapie_default.png\n 24x24 pixels\n\n\nres/drawable-hdpi-v11/ic_stat_Jeapie_default.png\n 36x36 pixels\n\n\nres/drawable-xhdpi-v11/ic_stat_Jeapie_default.png\n 48x48 pixels\n\n\nres/drawable-xxhdpi-v11/ic_stat_Jeapie_default.png\n 72x72 pixels\n\n\n\n\nAndroid 2.3 devices.\n\n\nThese icons are expected to be \ngrey(#828282 to #919191)\n.\n\n\n\n\nres/drawable-mdpi/ic_stat_Jeapie_default.png\n 24x24 pixels\n\n\nres/drawable-hdpi/ic_stat_Jeapie_default.png\n 36x36 pixels\n\n\nres/drawable-xhdpi/ic_stat_Jeapie_default.png\n 48x48 pixels\n\n\nres/drawable-xxhdpi/ic_stat_Jeapie_default.png\n 72x72 pixels\n\n\n\n\nLarge Notification Icon\n\n\nThe large notification icon will show up to the left of the notification text on Android 3.0 and newer devices. If you do not set a large icon the small icon will be used instead. If you want a default icon to be used name it \nic_Jeapie_large_icon_default\n (keeping the file extension) and place it in the \nres/drawable-xxhdpi-v11/\n folder or in the root of your assets folder. You only need one icon file at 192x192 pixels as we will auto scale the image for you to prevent it from being cropped.\n\n\nBig Picture\n\n\nAndroid 4.1 and newer devices support a big picture that will show below your notification text when it is expanded. It can and be located in your drawable folders, your assets folder in your project, or it can be loaded remotely from a server with a URL. It is recommend the image be a 2:1 aspect ratio so Android does not crop your image.\n\n\n\n\nNotification Sounds\n\n\nBy default Jeapie automatically plays the default system notification sound. If you would like a custom one to always play instead place a sound file in \nres/raw/\n and name it Jeapie_default_sound (keeping the file extension). You can use .wav, .mp3. or .ogg. If you would like to change the notification sound per notification you can add any other sound files in \nres/raw\n and include it's resource name (omit the file extension) in the sound field when sending the notification.\n\n\nIf your having issues with the sound not playing make sure that it is getting built into your APK by extracting it and make sure it is located in \nres/raw/\n.\n\n\nBackground Data (Silent Notifications)\n\n\nJeapie supports sending additional data along with a notification as key value pairs. You can read this additional data when a notification is opened or one comes in when your app is in use already by adding a \nnotificationOpened handler\n. However if you want to receive this data before the user opens the notification or you would like the data to be received silently without a notification then you will need to setup a BroadcastReceiver to get the data in the background.\n\n\n1.\n Add the following to your AndroidManifest.xml. (Make sure to update YOUR_FULL_PACKAGENAME.YOUR_CLASS_NAME with yours)\n\n\nreceiver\n   android:name=\nYOUR_FULL_PACKAGENAME.YOUR_CLASS_NAME\n\n   android:exported=\nfalse\n\n  \nintent-filter\n\n     \naction android:name=\ncom.Jeapie.BackgroundBroadcast.RECEIVE\n /\n\n  \n/intent-filter\n\n\n/receiver\n\n\n\n\n\n2.\n Create a class that extents BroadcastReceiver and implement the onReceive method.\n\n\n3.\n Call \ngetBundleExtra(\"data\")\n on the incoming intent to get the full Jeapie payload.\n\n\n4.\n You can then get alert and title strings from the bundle to get the message contents and header respectively.\n\n\n5.\n To get the additional data contents call \ngetString(\"custom\")\n on the bundle. You can create a new JSONObject from this string to make parsing of it easier. Your key value pairs will be located in the 'a' field in the custom JSON object.\n\n\n6.\n You can also run \ngetBoolean(\"isActive\")\n on the bundle to know if your app is currently in focus or not. If this is true consider that the notificationOpened handler you passed to Jeapie will also be called. You may want to skip your logic in the BroadcastReceiver if this is the case.\n\n\n(See our example code below which includes what was explained in steps 2 through 6.)\n\n\nimport org.json.JSONObject;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\n\npublic class JeapieBroadcastReceiver extends BroadcastReceiver {\n\n  // You may consider adding a wake lock here if you need to make sure the devices doesn't go to sleep while processing.\n  // We recommend starting a service of your own here if your doing any async calls or doing any heavy processing.\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    Bundle dataBundle = intent.getBundleExtra(\ndata\n);\n\n    try {\n      Log.i(\nJeapieExample\n, \nNotification content: \n + dataBundle.getString(\nalert\n));\n      Log.i(\nJeapieExample\n, \nNotification title: \n + dataBundle.getString(\ntitle\n));\n      Log.i(\nJeapieExample\n, \nIs Your App Active: \n + dataBundle.getBoolean(\nisActive\n));\n\n      JSONObject customJSON = new JSONObject(dataBundle.getString(\ncustom\n));\n      if (customJSON.has(\na\n))\n        Log.i(\nJeapieExample\n, \nadditionalData: \n + customJSON.getJSONObject(\na\n).toString());\n    } catch (Throwable t) {\n      t.printStackTrace();\n    }\n  }\n}\n\n\n\n\n7.\n Set android_background_data to true when sending a notification from our REST API so the BroadcastReceiver fires.\n\n\nExample Project\n\n\nWe have an example project with a custom sound, small icon, large icon, and a background data BroadcastReceiver \nyou can look at for reference\n.",
            "title": "Android Notification Customizations"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#android-notification-customizations",
            "text": "Highly recommend following at least our Small Notification Icon instructions.",
            "title": "Android Notification Customizations"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#small-notification-icon",
            "text": "Our SDK automatically by default uses your App's launcher icon but we highly recommend following our instructions to create custom ones for the following reasons:   Since the app icon is too large it will get cropped when the ticker text is showing on the status bar, however Android does scale the icon down to fit after the ticker text is done displaying.  Android's Notification Icon Standards  notes your small notification icon should be all white (grey on Android 2.3).  Starting with Android 5 the OS forces the notification icon to be all white when your app targets Android API 21+. If you don't make a correct small icon it will most likely be displayed as a solid white square or circle in the status bar.   To quickly and easily generate small icons with the correct settings we recommend using the  Android Asset Studio . Use  ic_stat_Jeapie_default  as the name. Download and extract the res folder contains to your project and send out some test notifications to make sure it is working.  If you prefer to not use the Android Asset Studio please make your icon files in the following locations and sizes:  Android 3.0 and higher.  These icons are expected to be entirely white.   res/drawable-mdpi-v11/ic_stat_Jeapie_default.png  24x24 pixels  res/drawable-hdpi-v11/ic_stat_Jeapie_default.png  36x36 pixels  res/drawable-xhdpi-v11/ic_stat_Jeapie_default.png  48x48 pixels  res/drawable-xxhdpi-v11/ic_stat_Jeapie_default.png  72x72 pixels   Android 2.3 devices.  These icons are expected to be  grey(#828282 to #919191) .   res/drawable-mdpi/ic_stat_Jeapie_default.png  24x24 pixels  res/drawable-hdpi/ic_stat_Jeapie_default.png  36x36 pixels  res/drawable-xhdpi/ic_stat_Jeapie_default.png  48x48 pixels  res/drawable-xxhdpi/ic_stat_Jeapie_default.png  72x72 pixels",
            "title": "Small Notification Icon"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#large-notification-icon",
            "text": "The large notification icon will show up to the left of the notification text on Android 3.0 and newer devices. If you do not set a large icon the small icon will be used instead. If you want a default icon to be used name it  ic_Jeapie_large_icon_default  (keeping the file extension) and place it in the  res/drawable-xxhdpi-v11/  folder or in the root of your assets folder. You only need one icon file at 192x192 pixels as we will auto scale the image for you to prevent it from being cropped.",
            "title": "Large Notification Icon"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#big-picture",
            "text": "Android 4.1 and newer devices support a big picture that will show below your notification text when it is expanded. It can and be located in your drawable folders, your assets folder in your project, or it can be loaded remotely from a server with a URL. It is recommend the image be a 2:1 aspect ratio so Android does not crop your image.",
            "title": "Big Picture"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#notification-sounds",
            "text": "By default Jeapie automatically plays the default system notification sound. If you would like a custom one to always play instead place a sound file in  res/raw/  and name it Jeapie_default_sound (keeping the file extension). You can use .wav, .mp3. or .ogg. If you would like to change the notification sound per notification you can add any other sound files in  res/raw  and include it's resource name (omit the file extension) in the sound field when sending the notification.  If your having issues with the sound not playing make sure that it is getting built into your APK by extracting it and make sure it is located in  res/raw/ .",
            "title": "Notification Sounds"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#background-data-silent-notifications",
            "text": "Jeapie supports sending additional data along with a notification as key value pairs. You can read this additional data when a notification is opened or one comes in when your app is in use already by adding a  notificationOpened handler . However if you want to receive this data before the user opens the notification or you would like the data to be received silently without a notification then you will need to setup a BroadcastReceiver to get the data in the background.  1.  Add the following to your AndroidManifest.xml. (Make sure to update YOUR_FULL_PACKAGENAME.YOUR_CLASS_NAME with yours)  receiver\n   android:name= YOUR_FULL_PACKAGENAME.YOUR_CLASS_NAME \n   android:exported= false \n   intent-filter \n      action android:name= com.Jeapie.BackgroundBroadcast.RECEIVE  / \n   /intent-filter  /receiver   2.  Create a class that extents BroadcastReceiver and implement the onReceive method.  3.  Call  getBundleExtra(\"data\")  on the incoming intent to get the full Jeapie payload.  4.  You can then get alert and title strings from the bundle to get the message contents and header respectively.  5.  To get the additional data contents call  getString(\"custom\")  on the bundle. You can create a new JSONObject from this string to make parsing of it easier. Your key value pairs will be located in the 'a' field in the custom JSON object.  6.  You can also run  getBoolean(\"isActive\")  on the bundle to know if your app is currently in focus or not. If this is true consider that the notificationOpened handler you passed to Jeapie will also be called. You may want to skip your logic in the BroadcastReceiver if this is the case.  (See our example code below which includes what was explained in steps 2 through 6.)  import org.json.JSONObject;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\n\npublic class JeapieBroadcastReceiver extends BroadcastReceiver {\n\n  // You may consider adding a wake lock here if you need to make sure the devices doesn't go to sleep while processing.\n  // We recommend starting a service of your own here if your doing any async calls or doing any heavy processing.\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    Bundle dataBundle = intent.getBundleExtra( data );\n\n    try {\n      Log.i( JeapieExample ,  Notification content:   + dataBundle.getString( alert ));\n      Log.i( JeapieExample ,  Notification title:   + dataBundle.getString( title ));\n      Log.i( JeapieExample ,  Is Your App Active:   + dataBundle.getBoolean( isActive ));\n\n      JSONObject customJSON = new JSONObject(dataBundle.getString( custom ));\n      if (customJSON.has( a ))\n        Log.i( JeapieExample ,  additionalData:   + customJSON.getJSONObject( a ).toString());\n    } catch (Throwable t) {\n      t.printStackTrace();\n    }\n  }\n}  7.  Set android_background_data to true when sending a notification from our REST API so the BroadcastReceiver fires.",
            "title": "Background Data (Silent Notifications)"
        },
        {
            "location": "/Android/Android-Notification-Customizations/#example-project",
            "text": "We have an example project with a custom sound, small icon, large icon, and a background data BroadcastReceiver  you can look at for reference .",
            "title": "Example Project"
        },
        {
            "location": "/Websdk/Website-SDK-Overview/",
            "text": "Website SDK Overview\n\n\nTo get Jeapie Push Notifications running on your website, follow these two steps.\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\nThis includes Chrome for Windows, Mac OSX, Linux, Chrome OS, and Android but \nNOT iOS\n.\n\n\n\n\nFollow our \nWebsite SDK HTTPS Installation\n guide if your website uses an HTTPS connection.\n\n\nOr follow our \nWebsite SDK HTTP Installation\n guide if your website is \nNon-HTTPS\n. (Uses an HTTP connection).",
            "title": "Website SDK Overview"
        },
        {
            "location": "/Websdk/Website-SDK-Overview/#website-sdk-overview",
            "text": "To get Jeapie Push Notifications running on your website, follow these two steps.  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+  This includes Chrome for Windows, Mac OSX, Linux, Chrome OS, and Android but  NOT iOS .   Follow our  Website SDK HTTPS Installation  guide if your website uses an HTTPS connection.  Or follow our  Website SDK HTTP Installation  guide if your website is  Non-HTTPS . (Uses an HTTP connection).",
            "title": "Website SDK Overview"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/",
            "text": "Website SDK HTTPS Installation\n\n\nJeapie SDK Installation for Chrome websites (desktop + mobile)\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only support by Chrome 42+\n\n\n\n\nIncludes Chrome for Windows, Mac OSX, Linux, Chrome OS, and Android but not iOS.\n\n\n\n\nHTTP and HTTPS\n\n\nIf some of your pages are served via HTTP instead of HTTPS then you will need to follow our \nHTTP Installation Guide\n instead.\n\n\nIf possible, we encourage you to migrate all your pages to HTTPS first and then continue using this guide.\n\n\n1. Download the SDK\n\n\n1.1\n Download the latest version of Jeapie Chrome Web SDK after the registration your site in the  \nJeapie Dashboard\n.\n\n\n1.2\n Copy \npush-worker.js\n and \nmanifest.json\n from \njeapie_sdk_\n out of the directory and into the top level root of your site directory.\n\n\n2. Include Required Files\n\n\n2.1\n Include \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n and \nmanifest.json\n in the \nhead\n HTML tag of each of your website pages. The best way is to add these to the code that generates the layout for each of your webpages. The resulting HTML should be the following:\n\n\nhead\n\n  \nscript src=\nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n \n/script\n\n  \nlink rel=\nmanifest\n href=\nmanifest.json\n\n\n/head\n\n\n\n\n\n3. Initialize Jeapie\n\n\n3.1 Init with auto register.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included on every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Add param \nautoRegister\n with value \ntrue\n.\n\n\nvar Jeapie = Jeapie || [];\n\nJeapie.init({\nappId\n: \n0e9b2d82456a5ad012714e981d972360\n, \nautoRegister\n: true});\n\n\n\n\nThe user will see a window asking for permission to receive notifications from your site immediately after the opening page\n\n\n\n\n3.2 Init with your custom button.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included on every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Create or use your button and update \nYOUR_CUSTOM_BUTTON_ID\n with your button id\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n});\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById(\nYOUR_CUSTOM_BUTTON_ID\n).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerUserForPush(function(success){\n        if (!!success) {\n            //your custom action\n        }\n    });\n}\n\n\n\n\nThe user will see a window asking for permission to receive notifications from your site immediately after click on button.\n\n\nEven you can create your own logic and call \nregisterPush()\n method.\n\n\n3.3 Init with Jeapie Widget.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included on every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Add param \ncreateButton\n with value \ntrue\n.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n, \ncreateButton\n: true});\n\n\n\n\nOn your site will be a button, when clicked, a window will appear to allow notifications from your site\n\n\n\n\nImportant\n\n\nYou must keep all files SDK together. \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n, \npush-worker.js\n and \nmanifest.json\n must be placed at the root of your site directory.\n\n\nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n and \nmanifest.json\n must be located in the head html tag in every one of your pages. This is so any page can subscribe for notifications, any page can be set to be opened from a notification, changes to the Google Registration id can be updated, and session count can be accurately counted.\n\n\nThat's It!\n\n\nThat's it for the setup. See our \nWeb SDK API\n for more functions.",
            "title": "Website SDK HTTPS Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#website-sdk-https-installation",
            "text": "Jeapie SDK Installation for Chrome websites (desktop + mobile)  Requirements  W3C Web Push Notifications are currently only support by Chrome 42+   Includes Chrome for Windows, Mac OSX, Linux, Chrome OS, and Android but not iOS.   HTTP and HTTPS  If some of your pages are served via HTTP instead of HTTPS then you will need to follow our  HTTP Installation Guide  instead.  If possible, we encourage you to migrate all your pages to HTTPS first and then continue using this guide.",
            "title": "Website SDK HTTPS Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#1-download-the-sdk",
            "text": "1.1  Download the latest version of Jeapie Chrome Web SDK after the registration your site in the   Jeapie Dashboard .  1.2  Copy  push-worker.js  and  manifest.json  from  jeapie_sdk_  out of the directory and into the top level root of your site directory.",
            "title": "1. Download the SDK"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#2-include-required-files",
            "text": "2.1  Include  https://cdn.jeapie.com/jeapiejs/webpush.js  and  manifest.json  in the  head  HTML tag of each of your website pages. The best way is to add these to the code that generates the layout for each of your webpages. The resulting HTML should be the following:  head \n   script src= https://cdn.jeapie.com/jeapiejs/webpush.js   /script \n   link rel= manifest  href= manifest.json  /head",
            "title": "2. Include Required Files"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#3-initialize-jeapie",
            "text": "3.1 Init with auto register.    Call  Jeapie.init  from a javascript file that is included on every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Add param  autoRegister  with value  true .  var Jeapie = Jeapie || [];\n\nJeapie.init({ appId :  0e9b2d82456a5ad012714e981d972360 ,  autoRegister : true});  The user will see a window asking for permission to receive notifications from your site immediately after the opening page   3.2 Init with your custom button.    Call  Jeapie.init  from a javascript file that is included on every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Create or use your button and update  YOUR_CUSTOM_BUTTON_ID  with your button id  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 });\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById( YOUR_CUSTOM_BUTTON_ID ).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerUserForPush(function(success){\n        if (!!success) {\n            //your custom action\n        }\n    });\n}  The user will see a window asking for permission to receive notifications from your site immediately after click on button.  Even you can create your own logic and call  registerPush()  method.  3.3 Init with Jeapie Widget.    Call  Jeapie.init  from a javascript file that is included on every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Add param  createButton  with value  true .  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 ,  createButton : true});  On your site will be a button, when clicked, a window will appear to allow notifications from your site   Important  You must keep all files SDK together.  https://cdn.jeapie.com/jeapiejs/webpush.js ,  push-worker.js  and  manifest.json  must be placed at the root of your site directory.  https://cdn.jeapie.com/jeapiejs/webpush.js  and  manifest.json  must be located in the head html tag in every one of your pages. This is so any page can subscribe for notifications, any page can be set to be opened from a notification, changes to the Google Registration id can be updated, and session count can be accurately counted.  That's It!  That's it for the setup. See our  Web SDK API  for more functions.",
            "title": "3. Initialize Jeapie"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/",
            "text": "Website SDK HTTP Installation\n\n\nJeapie SDK Installation for Chrome websites (desktop + mobile)\n\n\nHTTP vs. HTTPS\n\n\nThis is the guide for Chrome push on websites that have some pages served via HTTP instead of HTTPS.\n\n\nIf possible, we recommend making sure all your pages are only served via HTTPS and then following this guide instead: \nWebsite SDK HTTPS Installation\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only support by Chrome 42+\n\n\n\n\nIncludes Chrome for Windows, Mac OSX, Linux, Chrome OS, and Android but not iOS.\n\n\n\n\n1. Include Required JeapieSDK.js\n\n\n1.1\n Include \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n in the the \nhead\n HTML tag of each of your website pages. The best way is to add these to the code that generates the layout for each of your webpages. The resulting HTML should be the following:\n\n\nhead\n\n  \nscript src=\nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n/script\n\n\n/head\n\n\n\n\n\n2. Initialize Jeapie\n\n\nCall \nJeapie.init\n from a javascript file that is included on every page.\n\n\n\n\nUpdate \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId.\n\n\nUpdate \njeapie\n with the name value you entered in our dashboard.\n\n\n\n\n3.1 Init with Jeapie Widget\n \n\n\nCall \nJeapie.init\n from a javascript file that is included on every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Add param \ncreateButton\n with value \ntrue\n.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n, \nsubdomainName\n: \njeapie\n,\ncreateButton\n: true});\n\n\n\n\nOn your site will be a button, when clicked, a window will appear to allow notifications from your site\n\n\n\n\n3.2 Init with your custom button.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included on every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Create or use your button and update \nYOUR_CUSTOM_BUTTON_ID\n with your button id.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n,  \nsubdomainName\n : \njeapie\n });\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById(\nYOUR_CUSTOM_BUTTON_ID\n).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerHttp();\n}\n\n\n\n\nThat's It!\n\n\nThat's it for the setup. See our \nWeb SDK API\n for more functions and \nour examples\n on our Github page.",
            "title": "Website SDK HTTP Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#website-sdk-http-installation",
            "text": "Jeapie SDK Installation for Chrome websites (desktop + mobile)  HTTP vs. HTTPS  This is the guide for Chrome push on websites that have some pages served via HTTP instead of HTTPS.  If possible, we recommend making sure all your pages are only served via HTTPS and then following this guide instead:  Website SDK HTTPS Installation  Requirements  W3C Web Push Notifications are currently only support by Chrome 42+   Includes Chrome for Windows, Mac OSX, Linux, Chrome OS, and Android but not iOS.",
            "title": "Website SDK HTTP Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#1-include-required-jeapiesdkjs",
            "text": "1.1  Include  https://cdn.jeapie.com/jeapiejs/webpush.js  in the the  head  HTML tag of each of your website pages. The best way is to add these to the code that generates the layout for each of your webpages. The resulting HTML should be the following:  head \n   script src= https://cdn.jeapie.com/jeapiejs/webpush.js /script  /head",
            "title": "1. Include Required JeapieSDK.js"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#2-initialize-jeapie",
            "text": "Call  Jeapie.init  from a javascript file that is included on every page.   Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId.  Update  jeapie  with the name value you entered in our dashboard.   3.1 Init with Jeapie Widget    Call  Jeapie.init  from a javascript file that is included on every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Add param  createButton  with value  true .  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 ,  subdomainName :  jeapie , createButton : true});  On your site will be a button, when clicked, a window will appear to allow notifications from your site   3.2 Init with your custom button.    Call  Jeapie.init  from a javascript file that is included on every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Create or use your button and update  YOUR_CUSTOM_BUTTON_ID  with your button id.  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 ,   subdomainName  :  jeapie  });\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById( YOUR_CUSTOM_BUTTON_ID ).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerHttp();\n}  That's It!  That's it for the setup. See our  Web SDK API  for more functions and  our examples  on our Github page.",
            "title": "2. Initialize Jeapie"
        },
        {
            "location": "/Websdk/Website-SDK-API/",
            "text": "Website SDK API\n\n\nJavaScript Async\n\n\nJeapie supports loading the JeapieSDK.js file with the async flag so your page load times will not increase. The example assume you have the following defined before calling Jeapie functions:\n\n\nscript src=\nhttps://cdn.jeapie.com/sdks/JeapieSDK.js\n async\n/script\n\n\nscript\nvar Jeapie = Jeapie || [];\n/script\n\n\n\n\n\nYou have the option of calling most functions by using one of the two following methods:\n\n\n\n\nJeapie.push([\"functionName\", param1, param2]);\n\n\nJeapie.push(function() { Jeapie.functionName(param1, param2); });\n\n\n\n\nOption 2 must be used for functions that return a value like isPushNotificationsSupported. Option 2 also lets you call as many Jeapie functions as you need inside the passed in function.\n\n\nList of Functions\n\n\n\n\ninit\n\n\nregisterForPushNotifications\n\n\nsetDefaultNotificationUrl\n\n\nsetDefaultIcon\n\n\nsetDefaultTitle\n\n\nsendTag\n\n\nsendTags\n\n\ngetTags\n\n\ndeleteTag\n\n\ndeleteTags\n\n\nisPushNotificationsSupported\n\n\nisPushNotificationsEnabled\n\n\ngetIdsAvailable\n\n\naddListenerForNotificationOpened\n\n\n\n\nList of Callbacks\n\n\n\n\ntagsReceivedCallBack\n\n\nidsAvailableCallBack\n\n\nnotificationOpenedCallBack\n\n\n\n\nFunctions\n\n\ninit\n\n\nOnly required method you need to call to setup Jeapie to receive push notifications. Call this from each page of your site.\n\n\n\n\nParameters\n\n\nJSON\n \noptions\n\n\nString\n \nappId \n- Your Jeapie app id found on the settings page at jeapie.com.\n\n\nBoolean\n \nautoRegister(Optional)\n -Default true. Automatically show browser prompt to accept notifications. You can pass in false to delay this pop-up and then call \nregisterForPushNotifications\n to prompt them later.\n\n\n\n\nExample\n\n\n// Jeapie is defined as an array here and uses push calls to support JeapieSDK.js being loaded async.\nvar Jeapie = Jeapie || [];\n\nJeapie.push([\ninit\n, {appId: \n5eb5a37e-b458-11e3-ac11-000c2940e62c\n}]);\n\n\n\n\nregisterForPushNotifications\n\n\nCall when you want to prompt the user to accept push notifications. Only call if you set false to \nautoRegister:\n when calling init.\n\n\nExample\n\n\nJeapie.push([\nregisterForPushNotifications\n]);\n\n\n\n\nsetDefaultNotificationUrl\n\n\nPass in the full URL of the default page you want to open when a notification is clicked.\n\n\n\n\nParameters\n\n\nString\n \nurl\n - page url to open from notifications\n\n\n\n\nExample\n\n\nJeapie.push([\nsetDefaultNotificationUrl\n, \nhttps://domain.com/index2\n]);\n\n\n\n\nsetDefaultIcon\n\n\nPass the URL of the default icon you want to show to the left of the notification text. Highly recommend setting one otherwise there will just be a blank box to the left of the notification text.\n\n\n\n\nParameters\n\n\nString\n \nurl\n - icon url to show on notifications\n\n\n\n\nExample\n\n\nJeapie.push([\nsetDefaultIcon\n, \nimages/Jeapie_icon.png\n]);\n\n\n\n\nsetDefaultTitle\n\n\nSets the default title to display on notifications. Will default to the page's \ndocument.title\n if you don't call this.\n\n\n\n\nParameters\n\n\nString\n \ntitle\n - String to set as a default title on notifications\n\n\n\n\nExample\n\n\nJeapie.push([\nsetDefaultTitle\n, \nCustom Default Title\n]);\n\n\n\n\nsendTag\n\n\nTag a user based on an app event of your choosing so later you can create segments on \njeapie.com\n to target these users. Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.\n\n\n\n\nParameters\n\n\nstring\n \nkey\n - Key of your choosing to create or update.\n\n\nstring\n \nvalue\n - Value to set on the key.\n\n\nNOTE\n: Passing in a blank String deletes the key, you can also call deleteTag.\n\n\n\n\nExample\n\n\nJeapie.push([\nsendTag\n, \nkey\n, \nvalue\n]);\n\n\n\n\nsendTags\n\n\nTag a user based on an app event of your choosing so later you can create segments on \njeapie.com\n to target these users.\n\n\n\n\nParameters\n\n\nJSON\n \nkeyValues\n - Key value pairs of your choosing to create or update.\n\n\nNOTE\n: Passing in a blank String as a value deletes the key, you can also call deleteTag or deleteTags.\n\n\n\n\nExample\n\n\nJeapie.push([\nsendTags\n, {key2: \nvalue2\n, key3: \nvalue3\n}]);\n\n\n\n\ngetTags\n\n\nRetrieve a list of tags that have been set on the user from the Jeapie server.\n\n\n\n\nParameters\n\n\nfunction\n \ntagsReceivedCallBack\n - Passed in function which will receive one parameter containing JSON.\n\n\n\n\nExample\n\n\nJeapie.push([\ngetTags\n, function(tags) {\n    console.log(\nJeapie getTags:\n);\n    console.log(tags);\n  }]);\n\n\n\n\ndeleteTag\n\n\nDeletes a tag that was previously set on a user with \nsendTag\n or \nsendTags\n. Use \ndeleteTags\n if you need to delete more than one.\n\n\n\n\nParameters\n\n\nString\n \nkey\n - Key to remove.\n\n\n\n\nExample\n\n\nJeapie.push(\ndeleteTag\n, \nkey\n]);\n\n\n\n\ndeleteTags\n\n\nDeletes tags that were previously set on a user with \nsendTag\n or \nsendTags\n.\n\n\n\n\nParameters\n\n\nArray\n \nkeys\n - Keys to remove.\n\n\n\n\nExample\n\n\nJeapie.push([\ndeleteTags\n, [\nkey1\n, \nkey2\n]]);\n\n\n\n\nisPushNotificationsEnabled\n\n\nPasses true to the passed in callback if the user has already accepted push notifications and successfully registered with Google's GCM server and Jeapie's server. Callback should fire within 1 second so you can change your page to reflect if notifications are enabled or not.\n\n\nUse \ngetIdsAvailable\n you if want to only to run code after/if the user accepts push notifications and registers successfully.\n\n\n\n\nParameters\n\n\nfunction\n \nisPushNotificationsEnabledCallBack\n - Passed in function which will receive one boolean parameter if they are enabled or not.\n\n\n\n\nJeapie.push([\nisPushNotificationsEnabled\n, function(enabled) {\n  if (enabled)\n    alert(\nPush notifications are enabled!\n);\n  else\n    alert(\nPush notificaitons are not enable yet.\n);\n}]);\n\n\n\n\nisPushNotificationsSupported\n\n\nReturns true if the current browser viewing the page supports push notifications.\n\n\nJeapie.push(function() {\n  if (Jeapie.isPushNotificationsSupported())\n    alert(\nPush notifications are supported, please allow the permission to enable them\n);\n});\n\n\n\n\ngetIdsAvailable\n\n\nLets you retrieve the Jeapie User ID and the Google Registration ID. Your handler is called after the device is successfully registered with Jeapie.\n\n\n\n\nParameters\n\n\nfunction\n \nidsAvailableCallBack\n - Passed in function which will receive one parameter containing JSON with userId and registrationId.\n\n\n\n\nExample\n\n\nJeapie.push([\ngetIdsAvailable\n, function(ids) {\n  console.log(\ngetIdsAvailable:\n\n          + \n\\nUserID: \n + ids.userId\n          + \n\\nRegistration ID: \n + ids.registrationId);\n}]);\n\n\n\n\naddListenerForNotificationOpened\n\n\nPassed in callback that fires when the user clicks on a Jeapie notification.\n\n\n\n\nParameters\n\n\nfunction\n \nnotificationOpenedCallBack\n - Passed in function which will receive one parameter containing JSON with data about the notification that was clicked.\n\n\n\n\nExample\n\n\nJeapie.push([\naddListenerForNotificationOpened\n, function(data) {\n  console.log(\nReceived NotificationOpened:\n);\n  console.log(data);\n}]);\n\n\n\n\nCallbacks\n\n\ntagsReceivedCallBack\n\n\nGets all the tags set on a user from jeapie.com.\n\n\n\n\nParameters\n\n\nJSON\n \ntags\n - JSON object of key value pairs retrieved from the Jeapie server.\n\n\n\n\nExample\n\n\nJeapie.push([\ngetTags\n, function(tags) {\n    console.log(\nJeapie getTags:\n);\n    console.log(tags);\n  }]);\n\n\n\n\nidsAvailableCallBack\n\n\nGet the Jeapie userId and the Google Registration ID.\n\n\n\n\nJSON\n\n\nString\n \nuserId\n - Jeapie userId is a UUID formatted string.(unique to a Chrome user per device per app)\n\n\nString\n \nregistrationId\n - Google assigned identifier(\nunique to a Chrome user per device per app and changes on every reinstall\n).\n\n\nNOTE\n: Might be blank if there was a connection issue.\n\n\n\n\nExample\n\n\nJeapie.push([\ngetIdsAvailable\n, function(ids) {\n  console.log(\ngetIdsAvailable:\n\n          + \n\\nUserID: \n + ids.userId\n          + \n\\nRegistration ID: \n + ids.registrationId);\n  }]);\n\n\n\n\nnotificationOpenedCallBack\n\n\nFunction that gets called when a Jeapie notification is opened. Function will receive one parameter with JSON about the notification.\n\n\n\n\nJSON\n\n\nString\n \ntitle\n - Title set on the notification.\n\n\nString\n \nmessage\n - The message text the user seen in the notification.\n\n\nString\n \nicon\n - Icon set on the notification.\n\n\nJSON\n \nadditionalData\n - Key value pairs that were set on the notification.\n\n\n\n\nExample\n\n\nJeapie.push([\naddListenerForNotificationOpened\n, function(data) {\n  console.log(\nReceived NotificationOpened:\n);\n  console.log(data);\n}]);",
            "title": "Website SDK API"
        },
        {
            "location": "/Websdk/Website-SDK-API/#website-sdk-api",
            "text": "JavaScript Async  Jeapie supports loading the JeapieSDK.js file with the async flag so your page load times will not increase. The example assume you have the following defined before calling Jeapie functions:  script src= https://cdn.jeapie.com/sdks/JeapieSDK.js  async /script  script var Jeapie = Jeapie || []; /script   You have the option of calling most functions by using one of the two following methods:   Jeapie.push([\"functionName\", param1, param2]);  Jeapie.push(function() { Jeapie.functionName(param1, param2); });   Option 2 must be used for functions that return a value like isPushNotificationsSupported. Option 2 also lets you call as many Jeapie functions as you need inside the passed in function.",
            "title": "Website SDK API"
        },
        {
            "location": "/Websdk/Website-SDK-API/#list-of-functions",
            "text": "init  registerForPushNotifications  setDefaultNotificationUrl  setDefaultIcon  setDefaultTitle  sendTag  sendTags  getTags  deleteTag  deleteTags  isPushNotificationsSupported  isPushNotificationsEnabled  getIdsAvailable  addListenerForNotificationOpened",
            "title": "List of Functions"
        },
        {
            "location": "/Websdk/Website-SDK-API/#list-of-callbacks",
            "text": "tagsReceivedCallBack  idsAvailableCallBack  notificationOpenedCallBack",
            "title": "List of Callbacks"
        },
        {
            "location": "/Websdk/Website-SDK-API/#functions",
            "text": "init  Only required method you need to call to setup Jeapie to receive push notifications. Call this from each page of your site.   Parameters  JSON   options  String   appId  - Your Jeapie app id found on the settings page at jeapie.com.  Boolean   autoRegister(Optional)  -Default true. Automatically show browser prompt to accept notifications. You can pass in false to delay this pop-up and then call  registerForPushNotifications  to prompt them later.   Example  // Jeapie is defined as an array here and uses push calls to support JeapieSDK.js being loaded async.\nvar Jeapie = Jeapie || [];\n\nJeapie.push([ init , {appId:  5eb5a37e-b458-11e3-ac11-000c2940e62c }]);  registerForPushNotifications  Call when you want to prompt the user to accept push notifications. Only call if you set false to  autoRegister:  when calling init.  Example  Jeapie.push([ registerForPushNotifications ]);  setDefaultNotificationUrl  Pass in the full URL of the default page you want to open when a notification is clicked.   Parameters  String   url  - page url to open from notifications   Example  Jeapie.push([ setDefaultNotificationUrl ,  https://domain.com/index2 ]);  setDefaultIcon  Pass the URL of the default icon you want to show to the left of the notification text. Highly recommend setting one otherwise there will just be a blank box to the left of the notification text.   Parameters  String   url  - icon url to show on notifications   Example  Jeapie.push([ setDefaultIcon ,  images/Jeapie_icon.png ]);  setDefaultTitle  Sets the default title to display on notifications. Will default to the page's  document.title  if you don't call this.   Parameters  String   title  - String to set as a default title on notifications   Example  Jeapie.push([ setDefaultTitle ,  Custom Default Title ]);  sendTag  Tag a user based on an app event of your choosing so later you can create segments on  jeapie.com  to target these users. Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.   Parameters  string   key  - Key of your choosing to create or update.  string   value  - Value to set on the key.  NOTE : Passing in a blank String deletes the key, you can also call deleteTag.   Example  Jeapie.push([ sendTag ,  key ,  value ]);  sendTags  Tag a user based on an app event of your choosing so later you can create segments on  jeapie.com  to target these users.   Parameters  JSON   keyValues  - Key value pairs of your choosing to create or update.  NOTE : Passing in a blank String as a value deletes the key, you can also call deleteTag or deleteTags.   Example  Jeapie.push([ sendTags , {key2:  value2 , key3:  value3 }]);  getTags  Retrieve a list of tags that have been set on the user from the Jeapie server.   Parameters  function   tagsReceivedCallBack  - Passed in function which will receive one parameter containing JSON.   Example  Jeapie.push([ getTags , function(tags) {\n    console.log( Jeapie getTags: );\n    console.log(tags);\n  }]);  deleteTag  Deletes a tag that was previously set on a user with  sendTag  or  sendTags . Use  deleteTags  if you need to delete more than one.   Parameters  String   key  - Key to remove.   Example  Jeapie.push( deleteTag ,  key ]);  deleteTags  Deletes tags that were previously set on a user with  sendTag  or  sendTags .   Parameters  Array   keys  - Keys to remove.   Example  Jeapie.push([ deleteTags , [ key1 ,  key2 ]]);  isPushNotificationsEnabled  Passes true to the passed in callback if the user has already accepted push notifications and successfully registered with Google's GCM server and Jeapie's server. Callback should fire within 1 second so you can change your page to reflect if notifications are enabled or not.  Use  getIdsAvailable  you if want to only to run code after/if the user accepts push notifications and registers successfully.   Parameters  function   isPushNotificationsEnabledCallBack  - Passed in function which will receive one boolean parameter if they are enabled or not.   Jeapie.push([ isPushNotificationsEnabled , function(enabled) {\n  if (enabled)\n    alert( Push notifications are enabled! );\n  else\n    alert( Push notificaitons are not enable yet. );\n}]);  isPushNotificationsSupported  Returns true if the current browser viewing the page supports push notifications.  Jeapie.push(function() {\n  if (Jeapie.isPushNotificationsSupported())\n    alert( Push notifications are supported, please allow the permission to enable them );\n});  getIdsAvailable  Lets you retrieve the Jeapie User ID and the Google Registration ID. Your handler is called after the device is successfully registered with Jeapie.   Parameters  function   idsAvailableCallBack  - Passed in function which will receive one parameter containing JSON with userId and registrationId.   Example  Jeapie.push([ getIdsAvailable , function(ids) {\n  console.log( getIdsAvailable: \n          +  \\nUserID:   + ids.userId\n          +  \\nRegistration ID:   + ids.registrationId);\n}]);  addListenerForNotificationOpened  Passed in callback that fires when the user clicks on a Jeapie notification.   Parameters  function   notificationOpenedCallBack  - Passed in function which will receive one parameter containing JSON with data about the notification that was clicked.   Example  Jeapie.push([ addListenerForNotificationOpened , function(data) {\n  console.log( Received NotificationOpened: );\n  console.log(data);\n}]);",
            "title": "Functions"
        },
        {
            "location": "/Websdk/Website-SDK-API/#callbacks",
            "text": "tagsReceivedCallBack  Gets all the tags set on a user from jeapie.com.   Parameters  JSON   tags  - JSON object of key value pairs retrieved from the Jeapie server.   Example  Jeapie.push([ getTags , function(tags) {\n    console.log( Jeapie getTags: );\n    console.log(tags);\n  }]);  idsAvailableCallBack  Get the Jeapie userId and the Google Registration ID.   JSON  String   userId  - Jeapie userId is a UUID formatted string.(unique to a Chrome user per device per app)  String   registrationId  - Google assigned identifier( unique to a Chrome user per device per app and changes on every reinstall ).  NOTE : Might be blank if there was a connection issue.   Example  Jeapie.push([ getIdsAvailable , function(ids) {\n  console.log( getIdsAvailable: \n          +  \\nUserID:   + ids.userId\n          +  \\nRegistration ID:   + ids.registrationId);\n  }]);  notificationOpenedCallBack  Function that gets called when a Jeapie notification is opened. Function will receive one parameter with JSON about the notification.   JSON  String   title  - Title set on the notification.  String   message  - The message text the user seen in the notification.  String   icon  - Icon set on the notification.  JSON   additionalData  - Key value pairs that were set on the notification.   Example  Jeapie.push([ addListenerForNotificationOpened , function(data) {\n  console.log( Received NotificationOpened: );\n  console.log(data);\n}]);",
            "title": "Callbacks"
        },
        {
            "location": "/API/Server-API-Overview/",
            "text": "Server API Overview\n\n\nThe Jeapie Server API serves purpose: Programmatically delivering notifications from your server or from one mobile device to another.\n\n\nAuthentication\n\n\nAPI requests are identified using \nHTTP basic authentication\n.\n\nThe username portion is the application key \n\"APP_KEY\"\n.\n\nThe password portion is either the application secret \n\"APP_SECRET\"\n.\n\n\nYou can find API key of your mobile/web application here:\n\n\n\nCode example\n\n\n// via shell\n// example APP_KEY = 1e26f7bb3f81e1ab789d3e20b9cf6325\n// example APP_SECRET = 9bb59fcbff38b85647c421c65cca06ce\ncurl -X \\\n    -u \n1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce\n \\\n    -H \nContent-Type: application/json\n \\\n    https://app.jeapie.com/api/v2/push.json\n\n// or\ncurl -X \\\n    -u \n1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce\n \\\n    -H \nContent-Type: application/json\n \\\n    https://app.jeapie.com/api/v2/push.json\n\n\n\n\nNotifications\n\n\nThe notifications API can be used to send notifications to individual users, segments, or users that match specific tags. It can also be used to deliver a single notification to multiple Jeapie apps.\n\n\nAvailable /notifications methods\n\n\n\n\nFetch the details of notifications that have been sent GET /notifications\n\n\nFetch the details of a notification GET /notifications/:id\n\n\nSend a notification to a user, segment, app, or multiple apps POST /notifications\n\n\nTrack that a notification was opened",
            "title": "Server API Overview"
        },
        {
            "location": "/API/Server-API-Overview/#server-api-overview",
            "text": "The Jeapie Server API serves purpose: Programmatically delivering notifications from your server or from one mobile device to another.",
            "title": "Server API Overview"
        },
        {
            "location": "/API/Server-API-Overview/#authentication",
            "text": "API requests are identified using  HTTP basic authentication . \nThe username portion is the application key  \"APP_KEY\" . \nThe password portion is either the application secret  \"APP_SECRET\" .  You can find API key of your mobile/web application here:  Code example  // via shell\n// example APP_KEY = 1e26f7bb3f81e1ab789d3e20b9cf6325\n// example APP_SECRET = 9bb59fcbff38b85647c421c65cca06ce\ncurl -X \\\n    -u  1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce  \\\n    -H  Content-Type: application/json  \\\n    https://app.jeapie.com/api/v2/push.json\n\n// or\ncurl -X \\\n    -u  1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce  \\\n    -H  Content-Type: application/json  \\\n    https://app.jeapie.com/api/v2/push.json",
            "title": "Authentication"
        },
        {
            "location": "/API/Server-API-Overview/#notifications",
            "text": "The notifications API can be used to send notifications to individual users, segments, or users that match specific tags. It can also be used to deliver a single notification to multiple Jeapie apps.  Available /notifications methods   Fetch the details of notifications that have been sent GET /notifications  Fetch the details of a notification GET /notifications/:id  Send a notification to a user, segment, app, or multiple apps POST /notifications  Track that a notification was opened",
            "title": "Notifications"
        },
        {
            "location": "/API/notifications-Create-Notification/",
            "text": "api/v2/push.json Send Push Notification via API\n\n\nEndpoint\n\n\nhttps://go.jeapie.com/api/v2/push.json\n\n\nMethod\n\n\nPost\n\n\nAuthentication\n\n\nGo to link to read about \nJeapie authentication\n.\n\n\nFull example for Mobile platforms\n\n\n    {\n        // This params are cross-platform for all platforms\n        \nsend_date\n:\nnow\n, // or UNIX_TIME. Optional\n        \nmessage\n: \npush text\n,   // Required\n        \ndata\n:{\nkey\n: \nvalue\n}, // Optional\n        \nplatforms\n: [\nandroid\n, \nios\n], // Optional\n        \nbadge\n: \ninc\n, or number [0-999] // Optional\n        \ndefault_sound\n: 1, // Optional\n        \nttl\n: 3600, // Optional\n\n        // Android additional settings. Optional\n        \nandroid\n: {\n            \nsound\n : \nsoundfile\n,\n            \nheader\n:\nheader\n,\n            \nicon\n: \nicon\n,\n            \ncustom_icon\n: \nhttp://example.com/image.png\n,\n            \nbanner\n: \nhttp://example.com/banner.png\n\n        },\n\n        // iOS (in development). Optional\n        \nios\n: {\n            \nbadge\n: 5,\n            \nsound\n: \nfile.wav\n, // or \ndefault\n\n            \ncategory_id\n: \n1\n, // iOS new feature\n            \ncontent-available\n: 1\n        },\n\n        // Send to all devices\n        \naudience\n: {\n            \nall\n: 1 // send to all devices\n        }\n    }\n\n\n\n\nFull example for Web platforms\n\n\n{\n        // This params are cross-platform for all platforms\n        \nsend_date\n:\nnow\n, // or UNIX_TIME. Optional\n        \nmessage\n: \npush text\n,  // Required\n        \nplatforms\n: [\nchrome\n, \nsafari\n], // Optional\n        \nttl\n: 3600, // Optional\n\n        // Safari related (in development). Optional\n        \nsafari\n: { \n            \ntitle\n: \nTitle\n,\n            \naction\n: \nClick here\n,\n            \naction_url\n: \nhttp://example.com\n,\n            \nttl\n: 3600\n        },\n\n        // Chrome related (in development). Optional\n        \nchrome\n: {\n            \nheader\n: \ntitle example\n,\n            \nicon\n: \nhttp://example.com/icon.png\n,\n            \nredirect_url\n: \n/example.html\n // Default\n        },\n\n\n        // you should use only one of this params\n        \naudience\n: {\n            \nall\n: 1 // send to all devices\n        }\n    }\n\n\n\n\nDescription of the params\n\n\nCross-platform params\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsend_date\n \nOptional\n\n\nMixed\n: String or Int \n \ndefault:\n \n\"now\"\n\n\n\n\n\n\n\n\nTime for scheduled push. Can be \"now\" or UNIX_TIME \n Example: \n \n\"send_date\": \"now\"\n or \n\"send_date\": 1430568855\n\n\n\n\n\n\nmessage\n \nRequired\n\n\nString\n \n \nRequired unless content_available=true\n\n\n\n\n\n\n\n\nPush text. Example: \n \n\"message\": \"hello, world\"\n\n\n\n\n\n\ndata\n \nOptional\n\n\nHash\n\n\n\n\n\n\n\n\nExtra data for push. Can contains additional data for for processing within the application. Example: \n \n\"data\": {\"page\": 1, \"url\": \"http://example.com}\"\n\n\n\n\n\n\nbadge\n \nOptional\n\n\nMixed\n: String or Int\n\n\n\n\n\n\n\n\nOnly for iphone and windows phone. For set badge number use int, for increment badge number use \"inc\". Example: \n \n\"badge\": 3\n or \n\"badge\": \"inc\"\n\n\n\n\n\n\nplatforms\n \nOptional\n\n\nArray\n \n List of mobile platforms: \"android\" \n List of web platforms: \"chrome\", \"safari\"\n\n\n\n\n\n\n\n\nList of platforms. Example: \n if mobile platforms: \n\"platforms\": [\"android\", \"ios\"]\n \n or if web platforms: \n\"platforms\": [\"chrome\", \"safari\"]\n\n\n\n\n\n\ndefault_sound\n \nOptional\n\n\nInt\n: \n0\n or \n1\n \n \ndefault:\n \n0\n\n\n\n\n\n\n\n\nIf need default sound set \n1\n else \n0\n. Example: \n \n\"default_sound\": 1\n\n\n\n\n\n\nttl\n \nOptional\n\n\nInt\n \n \ndefault:\n \n3600\n\n\n\n\n\n\n\n\nTime to live parameter - the maximum lifespan of a message in seconds. \nExample: \n\"ttl\":3600\n\n\n\n\n\n\n\n\nAndroid params \n(All params are optional)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsound\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nSound file name in the \"res/raw\" folder, do not include the extension. \n Example: \n\"sound\": \"taff\"\n\n\n\n\n\n\nheader\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nAndroid notification header. \nExample: \n\"header\": \"Header text\"\n\n\n\n\n\n\nicon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nIcon file name in the \"res/drawable\" folder. \nExample: \n\"icon\":\"icon.png\"\n\n\n\n\n\n\ncustom_icon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nIcon full path http url \nExample: \n\"custom_icon\": \"http://example.com/icon.png\"\n\n\n\n\n\n\nbanner\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nBanner full path http url \nExample: \n\"custom_icon\": \"http://example.com/banner.png\"\n\n\n\n\n\n\n\n\nChrome params \n(All params are optional)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nChrome notification header. \nExample: \n\"header\": \"Header text\"\n\n\n\n\n\n\nicon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nIcon full path http url \nExample: \n\"custom_icon\": \"http://example.com/icon.png\"\n\n\n\n\n\n\nredirect_url\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nThe relative url which is redirect after clicking on a push. \nExample: \n\"redirect_url\": \"/example.html\"\n\n\n\n\n\n\n\n\niOS params \n(In development)\n\n\nSafari params \n(In development)\n\n\nAudience \n(Required)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nall\n\n\nInt\n\n\n\n\n\n\n\n\nsend to all devices. \n Example: \n\"all\": 1\n\n\n\n\n\n\ntokens\n\n\nArray\n\n\n\n\n\n\n\n\nSend to array of device push tokens. Limit 100 tokens. Example: \n \n\"tokens\": [\"dec301908b9ba...8df85e57a58e40f96f\", \"523f4c2068674f1fe...2ba25cdc250a2a41\"]\n\n\n\n\n\n\naliases\n\n\nArray\n\n\n\n\n\n\n\n\nArray of device aliases setted by sdk in mobile app or web. Example: \n \n\"aliases\": [\"own_id_device_1\", \"own_id_device_2\", \"own_id_device_3\"]\n\n\n\n\n\n\n\n\nResult Format\n\n\n\n\n200 OK\n\n\n\n\n{\n    \nid\n:\n55704a589e31ab441e8b4569\n,\n    \nstatus\n:\ncompleted\n,\n    \nmessage\n:\ntest\n,\n    \nextra_data\n:[],\n    \nplatforms\n:\nAndroid\n,\n    \nbadge\n:\ninc\n,\n    \ndefault_sound\n:\n1\n,\n    \nttl\n:3600\n}\n\n\n\n\nExamples Shell Code\n\n\nSend push to all platforms and all devices immediately:\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \ntest\n,\n        \naudience\n: {\n            \nall\n: 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json\n\n\n\n\nSend push only on android with additional android params on aliases setted in mobile app:\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \ntest\n,\n        \nplatforms\n: [\nandroid\n],\n        \nandroid\n: {\n            \nheader\n: \ntitle\n\n        },\n        \naudience\n: {\n            \naliases\n: [\nsome_id1\n, \nsome_id2\n, \nemail@example.com\n]\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json\n\n\n\n\nSend push to chrome and redirect to page after clicking on push\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \nPush message\n,\n        \nplatforms\n: [\nchrome\n],\n        \nchrome\n: {\n            \nheader\n: \ntitle message\n,\n            \nicon\n: \nhttp://example.com/icon.png\n,\n            \nredirect_url\n: \n/relative_url.html\n\n        },\n        \naudience\n: {\n            \nall\n: 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json",
            "title": "Send Push Notification"
        },
        {
            "location": "/API/notifications-Create-Notification/#apiv2pushjson-send-push-notification-via-api",
            "text": "Endpoint  https://go.jeapie.com/api/v2/push.json  Method  Post  Authentication  Go to link to read about  Jeapie authentication .  Full example for Mobile platforms      {\n        // This params are cross-platform for all platforms\n         send_date : now , // or UNIX_TIME. Optional\n         message :  push text ,   // Required\n         data :{ key :  value }, // Optional\n         platforms : [ android ,  ios ], // Optional\n         badge :  inc , or number [0-999] // Optional\n         default_sound : 1, // Optional\n         ttl : 3600, // Optional\n\n        // Android additional settings. Optional\n         android : {\n             sound  :  soundfile ,\n             header : header ,\n             icon :  icon ,\n             custom_icon :  http://example.com/image.png ,\n             banner :  http://example.com/banner.png \n        },\n\n        // iOS (in development). Optional\n         ios : {\n             badge : 5,\n             sound :  file.wav , // or  default \n             category_id :  1 , // iOS new feature\n             content-available : 1\n        },\n\n        // Send to all devices\n         audience : {\n             all : 1 // send to all devices\n        }\n    }  Full example for Web platforms  {\n        // This params are cross-platform for all platforms\n         send_date : now , // or UNIX_TIME. Optional\n         message :  push text ,  // Required\n         platforms : [ chrome ,  safari ], // Optional\n         ttl : 3600, // Optional\n\n        // Safari related (in development). Optional\n         safari : { \n             title :  Title ,\n             action :  Click here ,\n             action_url :  http://example.com ,\n             ttl : 3600\n        },\n\n        // Chrome related (in development). Optional\n         chrome : {\n             header :  title example ,\n             icon :  http://example.com/icon.png ,\n             redirect_url :  /example.html  // Default\n        },\n\n\n        // you should use only one of this params\n         audience : {\n             all : 1 // send to all devices\n        }\n    }  Description of the params  Cross-platform params           send_date   Optional  Mixed : String or Int    default:   \"now\"     Time for scheduled push. Can be \"now\" or UNIX_TIME   Example:    \"send_date\": \"now\"  or  \"send_date\": 1430568855    message   Required  String     Required unless content_available=true     Push text. Example:    \"message\": \"hello, world\"    data   Optional  Hash     Extra data for push. Can contains additional data for for processing within the application. Example:    \"data\": {\"page\": 1, \"url\": \"http://example.com}\"    badge   Optional  Mixed : String or Int     Only for iphone and windows phone. For set badge number use int, for increment badge number use \"inc\". Example:    \"badge\": 3  or  \"badge\": \"inc\"    platforms   Optional  Array    List of mobile platforms: \"android\"   List of web platforms: \"chrome\", \"safari\"     List of platforms. Example:   if mobile platforms:  \"platforms\": [\"android\", \"ios\"]    or if web platforms:  \"platforms\": [\"chrome\", \"safari\"]    default_sound   Optional  Int :  0  or  1     default:   0     If need default sound set  1  else  0 . Example:    \"default_sound\": 1    ttl   Optional  Int     default:   3600     Time to live parameter - the maximum lifespan of a message in seconds.  Example:  \"ttl\":3600     Android params  (All params are optional)           sound   Optional  String     Sound file name in the \"res/raw\" folder, do not include the extension.   Example:  \"sound\": \"taff\"    header   Optional  String     Android notification header.  Example:  \"header\": \"Header text\"    icon   Optional  String     Icon file name in the \"res/drawable\" folder.  Example:  \"icon\":\"icon.png\"    custom_icon   Optional  String     Icon full path http url  Example:  \"custom_icon\": \"http://example.com/icon.png\"    banner   Optional  String     Banner full path http url  Example:  \"custom_icon\": \"http://example.com/banner.png\"     Chrome params  (All params are optional)           header   Optional  String     Chrome notification header.  Example:  \"header\": \"Header text\"    icon   Optional  String     Icon full path http url  Example:  \"custom_icon\": \"http://example.com/icon.png\"    redirect_url   Optional  String     The relative url which is redirect after clicking on a push.  Example:  \"redirect_url\": \"/example.html\"     iOS params  (In development)  Safari params  (In development)  Audience  (Required)           all  Int     send to all devices.   Example:  \"all\": 1    tokens  Array     Send to array of device push tokens. Limit 100 tokens. Example:    \"tokens\": [\"dec301908b9ba...8df85e57a58e40f96f\", \"523f4c2068674f1fe...2ba25cdc250a2a41\"]    aliases  Array     Array of device aliases setted by sdk in mobile app or web. Example:    \"aliases\": [\"own_id_device_1\", \"own_id_device_2\", \"own_id_device_3\"]     Result Format   200 OK   {\n     id : 55704a589e31ab441e8b4569 ,\n     status : completed ,\n     message : test ,\n     extra_data :[],\n     platforms : Android ,\n     badge : inc ,\n     default_sound : 1 ,\n     ttl :3600\n}",
            "title": "api/v2/push.json Send Push Notification via API"
        },
        {
            "location": "/API/notifications-Create-Notification/#examples-shell-code",
            "text": "Send push to all platforms and all devices immediately:  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  test ,\n         audience : {\n             all : 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json  Send push only on android with additional android params on aliases setted in mobile app:  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  test ,\n         platforms : [ android ],\n         android : {\n             header :  title \n        },\n         audience : {\n             aliases : [ some_id1 ,  some_id2 ,  email@example.com ]\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json  Send push to chrome and redirect to page after clicking on push  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  Push message ,\n         platforms : [ chrome ],\n         chrome : {\n             header :  title message ,\n             icon :  http://example.com/icon.png ,\n             redirect_url :  /relative_url.html \n        },\n         audience : {\n             all : 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json",
            "title": "Examples Shell Code"
        }
    ]
}