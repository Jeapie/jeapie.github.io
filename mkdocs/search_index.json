{
    "docs": [
        {
            "location": "/",
            "text": "DOCUMENTATION\n\n\n\nGetting Started\n\n\nIOS\n\n\n\n\n\niOS Native SDK Overview\n\n\nGenerating an iOS Push Certificate\n\n\niOS Native SDK Installation\n\n\niOS Native SDK API\n\n\n\n\nANDROID\n\n\n\n\n\nAndroid Native SDK Overview\n\n\nAndroid - Generating a GCM Push Notification Key\n\n\nAndroid Native SDK Installation\n\n\n\n\n\n\n\n\nWEBSITES\n\n\n\n\n\nWebsite SDK Overview\n\n\nWebsite - Generating a GCM Push Notification Key\n\n\nWebsite SDK HTTPS Installation\n\n\nWebsite SDK HTTP Installation\n\n\nWebsite SDK API\n\n\n\n\nSERVER API\n\n\n\n\n\nServer API Overview\n\n\nSend Push via Rest API",
            "title": "Home"
        },
        {
            "location": "/Getting-Started/",
            "text": "Getting Started\n\n\n\nWhat is Jeapie?\n\n\n\nJeapie is a simple and reliable push notification system built for mobile and web applications. Jeapie supports all major mobile app development platforms.\n\n\nSetup Instructions\n\n\n\nGet started by selecting your platform below:\n\n\n\n\n\n\n\n\nPlatform\n\n\nSetup Instructions\n\n\n\n\n\n\n\n\n\n\nNative Android\n\n\nUsing Jeapie in your Android App\n\n\n\n\n\n\nChrome Web Notifications\n\n\nUsing Jeapie Push on your Website\n\n\n\n\n\n\nImplement your own plugin\n\n\nUsing the Jeapie Server API\n\n\n\n\n\n\nNone of the above\n\n\nContact us at \nsupport@jeapie.com\n and we'll help get you running.",
            "title": "Getting Started"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/",
            "text": "Android Native SDK Overview\n\n\nTo get Jeapie Push Notifications running on Android, follow these two steps:\n\n\nStep 1\n\n\nGenerate a GCM API Key\n\n\nStep 2\n\n\nInstall the Jeapie Android SDK",
            "title": "Android Native SDK Overview"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#android-native-sdk-overview",
            "text": "To get Jeapie Push Notifications running on Android, follow these two steps:",
            "title": "Android Native SDK Overview"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#step-1",
            "text": "Generate a GCM API Key",
            "title": "Step 1"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#step-2",
            "text": "Install the Jeapie Android SDK",
            "title": "Step 2"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/",
            "text": "Android - Generating a GCM Push Notification Key\n\n\nConnect your Google Cloud Messenger Android app with Jeapie\n\n\nSTEP 1: Create a Google Project and save the \"Project Number\"\n\n\n1.1\n Create a project at \nhttps://console.developers.google.com/project\n for your app.\n\n\n\n\n1.2\n Select your Project and click on \"Overview\". Your project number should be located on this page.\n\n\n\n\nCopy the \"Project Number\" from this page.\n\n\nYou will need to add it to the source code of your app later when you follow the SDK guide.\n\n\nSTEP 2: Turn on \"Google Cloud Messaging for Android\" API\n\n\n2.\n Under APIs \n auth\nAPIs, search for \"Google Cloud Messaging for Android\". Turn it on.\n\n\n\n\n\n\nSTEP 3: Create and save Server Key\n\n\n3.1\n Under \"APIs \n auth\" \n \"Credentials\", click \"Create new key\".\n\n\n3.2\n Select \"Server key\"\n\n\n\n\n\n\n3.3\n Press the \"Create\" button.\n\n\nIMPORTANT\n\n\nDO NOT enter anything into the box.\n\n\n\n\n3.4\n Copy the \"API Key\". You will need it to configure your project using Jeapie\n\n\n\n\nSTEP 4: Configure your Android App using Jeapie\n\n\n4.1\n Log into Jeapie. In the dashboard, select \"Application Settings\" and then press the \"Configure\" button to the right of \"Google Play (GCM)\".\n\n\n\n\n\n\n4.2\n Paste your Google API Key into \"Android key\" field and press Save.\n\n\n\n\nConfiguration for sending Android push notifications is complete!\n\n\nNext step is \nsetting up the Android SDK",
            "title": "Android - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#android-generating-a-gcm-push-notification-key",
            "text": "Connect your Google Cloud Messenger Android app with Jeapie",
            "title": "Android - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-1-create-a-google-project-and-save-the-project-number",
            "text": "1.1  Create a project at  https://console.developers.google.com/project  for your app.   1.2  Select your Project and click on \"Overview\". Your project number should be located on this page.   Copy the \"Project Number\" from this page.  You will need to add it to the source code of your app later when you follow the SDK guide.",
            "title": "STEP 1: Create a Google Project and save the \"Project Number\""
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-2-turn-on-google-cloud-messaging-for-android-api",
            "text": "2.  Under APIs   auth APIs, search for \"Google Cloud Messaging for Android\". Turn it on.",
            "title": "STEP 2: Turn on \"Google Cloud Messaging for Android\" API"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-3-create-and-save-server-key",
            "text": "3.1  Under \"APIs   auth\"   \"Credentials\", click \"Create new key\".  3.2  Select \"Server key\"    3.3  Press the \"Create\" button.  IMPORTANT  DO NOT enter anything into the box.   3.4  Copy the \"API Key\". You will need it to configure your project using Jeapie",
            "title": "STEP 3: Create and save Server Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-4-configure-your-android-app-using-jeapie",
            "text": "4.1  Log into Jeapie. In the dashboard, select \"Application Settings\" and then press the \"Configure\" button to the right of \"Google Play (GCM)\".    4.2  Paste your Google API Key into \"Android key\" field and press Save.   Configuration for sending Android push notifications is complete!  Next step is  setting up the Android SDK",
            "title": "STEP 4: Configure your Android App using Jeapie"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/",
            "text": "Android Native SDK Installation\n\n\n'Google Play services' \n 'Android Support Library'\n\n\nJeapie requires Google Play services (google-play-services_lib) and Android Support Library v4 (android-support-v4.jar). android-support-v13.jar can be used instead if your project already requires it.\n\n\n1.\n Download the latest \nJeapie Android SDK\n.\n\n\n2.\n Copy *.aar file into the lib folder of your android project.\n\n\n3.\n Set \nsdk filename\n of the *.aar file and \nplay-services\n in gradle.\n\n\ndependencies {\n    compile(name:'jeapie-sdk-x.x.x', ext:'aar')\n    compile 'com.google.android.gms:play-services:6.5.87'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.0.0'\n}\n\nrepositories{\n    flatDir{\n        dirs 'libs'\n    }\n}\n\n\n\n\n4.\n Paste permissions into the \nManifest\n file of your Android project .\n\n\nReplace \n{APP_PACKAGE}\n by your own package.\n\n\n    \nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n    \nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n/\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n    \nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n    \nuses-permission android:name=\nandroid.permission.GET_ACCOUNTS\n/\n\n    \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n/\n\n    \nuses-permission android:name=\ncom.google.android.c2dm.permission.RECEIVE\n/\n\n    \nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n/\n\n    \nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n    \nuses-permission android:name=\ncom.google.android.providers.gsf.permission.READ_GSERVICES\n/\n\n\n    \npermission\n            android:name=\n{APP_PACKAGE}.permission.C2D_MESSAGE\n\n            android:protectionLevel=\nsignature\n/\n\n\n    \nuses-permission android:name=\n{APP_PACKAGE}.permission.C2D_MESSAGE\n/\n\n\n\n\n\n\n5.\n Paste configs into the \nManifest\n file of your Anroid project. \n\n\nReplace \n{APP_SECRET}\n and \n{APP_KEY}\n by your own keys from Jeapie dashboard.\n\n\n\nAlso replace  \nA{PROJECT_ID}\n by a project number from your Google Console.\n\nLook \nHow to get project number\n\n\n\n\nNote\n\n\n{PROJECT_NUMBER} value is a number but make sure you prefix it with the letter \n\u201cA\u201d\n as in the example above.\nExample: \"A1111111111\"\n\n\n\n\n\napplication ....\n\n        \nmeta-data\n            android:name=\ncom.jeapie.key\n\n            android:value=\n{APP_KEY}\n/\n\n\n        \nmeta-data\n            android:name=\ncom.jeapie.secret\n\n            android:value=\n{APP_SECRET}\n/\n\n\n        \nmeta-data\n            android:name=\nproject_number\n\n            android:value=\nA{PROJECT_NUMBER}\n/\n\n\n\n        \nreceiver android:name=\ncom.jeapieLib.reciever.GCMReceiver\n\n            \nintent-filter\n\n                \naction android:name=\ncom.google.android.c2dm.intent.RECEIVE\n/\n\n                \naction android:name=\ncom.google.android.c2dm.intent.REGISTRATION\n/\n\n                \ncategory android:name=\ncom.jeapieApp\n/\n\n            \n/intent-filter\n\n        \n/receiver\n\n\n        \nreceiver android:name=\ncom.jeapieLib.reciever.GCMReceiver\n\n            \nintent-filter\n\n                \naction android:name=\ncom.google.android.c2dm.intent.RECEIVE\n/\n\n                \naction android:name=\ncom.google.android.c2dm.intent.REGISTRATION\n/\n\n                \ncategory android:name=\ncom.jeapieApp\n/\n\n            \n/intent-filter\n\n        \n/receiver\n\n\n        \nreceiver android:name=\ncom.jeapieLib.reciever.InternetConnectionReceiver\n\n            \nintent-filter\n\n                \naction android:name=\nandroid.net.conn.CONNECTIVITY_CHANGE\n/\n\n            \n/intent-filter\n\n        \n/receiver\n\n\n        \nservice android:name=\ncom.jeapieLib.service.EventsSenderService\n/\n\n\n        \nservice android:name=\ncom.jeapieLib.service.LocationTrackingService\n/\n\n\n\n/application\n\n\n\n\n\n6.\n Paste the code into \"Launch Activity\"\n\n\nJeapieAPI.init(getApplicationContext());\n\n\n//tracking push opening\nBundle bundle = getIntent().getExtras();\nJeapieAPI.getInstance().trackPushOpen(bundle);\n\n\n\n\n7.\n Now you can use jeapie sdk methods",
            "title": "Android Native SDK Installation"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/#android-native-sdk-installation",
            "text": "'Google Play services'   'Android Support Library'  Jeapie requires Google Play services (google-play-services_lib) and Android Support Library v4 (android-support-v4.jar). android-support-v13.jar can be used instead if your project already requires it.  1.  Download the latest  Jeapie Android SDK .  2.  Copy *.aar file into the lib folder of your android project.  3.  Set  sdk filename  of the *.aar file and  play-services  in gradle.  dependencies {\n    compile(name:'jeapie-sdk-x.x.x', ext:'aar')\n    compile 'com.google.android.gms:play-services:6.5.87'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.0.0'\n}\n\nrepositories{\n    flatDir{\n        dirs 'libs'\n    }\n}  4.  Paste permissions into the  Manifest  file of your Android project .  Replace  {APP_PACKAGE}  by your own package.       uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE / \n     uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE / \n     uses-permission android:name= android.permission.ACCESS_NETWORK_STATE / \n     uses-permission android:name= android.permission.INTERNET / \n     uses-permission android:name= android.permission.GET_ACCOUNTS / \n     uses-permission android:name= android.permission.WAKE_LOCK / \n     uses-permission android:name= com.google.android.c2dm.permission.RECEIVE / \n     uses-permission android:name= android.permission.READ_PHONE_STATE / \n     uses-permission android:name= android.permission.VIBRATE / \n     uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION / \n     uses-permission android:name= android.permission.ACCESS_FINE_LOCATION / \n     uses-permission android:name= com.google.android.providers.gsf.permission.READ_GSERVICES / \n\n     permission\n            android:name= {APP_PACKAGE}.permission.C2D_MESSAGE \n            android:protectionLevel= signature / \n\n     uses-permission android:name= {APP_PACKAGE}.permission.C2D_MESSAGE /   5.  Paste configs into the  Manifest  file of your Anroid project.   Replace  {APP_SECRET}  and  {APP_KEY}  by your own keys from Jeapie dashboard.  Also replace   A{PROJECT_ID}  by a project number from your Google Console. \nLook  How to get project number   Note  {PROJECT_NUMBER} value is a number but make sure you prefix it with the letter  \u201cA\u201d  as in the example above.\nExample: \"A1111111111\"   application .... \n         meta-data\n            android:name= com.jeapie.key \n            android:value= {APP_KEY} / \n\n         meta-data\n            android:name= com.jeapie.secret \n            android:value= {APP_SECRET} / \n\n         meta-data\n            android:name= project_number \n            android:value= A{PROJECT_NUMBER} / \n\n\n         receiver android:name= com.jeapieLib.reciever.GCMReceiver \n             intent-filter \n                 action android:name= com.google.android.c2dm.intent.RECEIVE / \n                 action android:name= com.google.android.c2dm.intent.REGISTRATION / \n                 category android:name= com.jeapieApp / \n             /intent-filter \n         /receiver \n\n         receiver android:name= com.jeapieLib.reciever.GCMReceiver \n             intent-filter \n                 action android:name= com.google.android.c2dm.intent.RECEIVE / \n                 action android:name= com.google.android.c2dm.intent.REGISTRATION / \n                 category android:name= com.jeapieApp / \n             /intent-filter \n         /receiver \n\n         receiver android:name= com.jeapieLib.reciever.InternetConnectionReceiver \n             intent-filter \n                 action android:name= android.net.conn.CONNECTIVITY_CHANGE / \n             /intent-filter \n         /receiver \n\n         service android:name= com.jeapieLib.service.EventsSenderService / \n\n         service android:name= com.jeapieLib.service.LocationTrackingService /  /application   6.  Paste the code into \"Launch Activity\"  JeapieAPI.init(getApplicationContext());\n\n\n//tracking push opening\nBundle bundle = getIntent().getExtras();\nJeapieAPI.getInstance().trackPushOpen(bundle);  7.  Now you can use jeapie sdk methods",
            "title": "Android Native SDK Installation"
        },
        {
            "location": "/Websdk/Website-SDK-Overview/",
            "text": "Website SDK Overview\n\n\nTo get Jeapie Push Notifications running on your website, follow these two steps.\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\nThis includes Chrome for Windows, Mac OSX, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.\n\n\n\n\nFollow our \nWebsite SDK HTTPS Installation\n guide if your website uses an HTTPS connection.\n\n\nOr follow our \nWebsite SDK HTTP Installation\n guide if your website is \nNon-HTTPS\n. (Uses an HTTP connection).",
            "title": "Website SDK Overview"
        },
        {
            "location": "/Websdk/Website-SDK-Overview/#website-sdk-overview",
            "text": "To get Jeapie Push Notifications running on your website, follow these two steps.  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+  This includes Chrome for Windows, Mac OSX, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.   Follow our  Website SDK HTTPS Installation  guide if your website uses an HTTPS connection.  Or follow our  Website SDK HTTP Installation  guide if your website is  Non-HTTPS . (Uses an HTTP connection).",
            "title": "Website SDK Overview"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/",
            "text": "Website SDK HTTPS Installation\n\n\nJeapie SDK Installation for Chrome websites (desktop + mobile)\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\n\n\nIncludes Chrome for Windows, Mac OS X, Linux, Chrome OS, and Android. Chrome for iOS is not yet supported.\n\n\n\n\nHTTP and HTTPS\n\n\nIf some of your pages are served via HTTP instead of HTTPS, then you will need to follow our \nHTTP Installation Guide\n instead.\n\n\nIf possible, we encourage you to migrate all your pages to HTTPS first, and then continue using this guide.\n\n\n1. Download the SDK\n\n\n1.1\n Download the latest version of Jeapie Chrome Web SDK after the registration of your site in the  \nJeapie Dashboard\n.\n\n\n1.2\n Copy \npush-worker.js\n and \nmanifest.json\n from \njeapie_sdk_\n directory and paste it into the top-level directory (root folder) of your site.\n\n\n2. Include Required Files\n\n\n2.1\n Link \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n and \nmanifest.json\n to each page of your website by adding some code between \nhead\n and \n/head\n tags.  Most likely, you will have to do it just once in the file, which helps to generate a layout of the site. The resulting HTML should look like this:\n\n\nhead\n\n  \nscript src=\nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n \n/script\n\n  \nlink rel=\nmanifest\n href=\nmanifest.json\n\n\n/head\n\n\n\n\n\n3. Initialize Jeapie\n\n\n3.1 Init with auto register.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included in every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Add param \nautoRegister\n with value \ntrue\n.\n\n\nvar Jeapie = Jeapie || [];\n\nJeapie.init({\nappId\n: \n0e9b2d82456a5ad012714e981d972360\n, \nautoRegister\n: true});\n\n\n\n\nThe user will see a window asking for permission to receive notifications from your site immediately after opening the page\n\n\n\n\n3.2 Init with your custom button.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included in every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Create or use your button and update \nYOUR_CUSTOM_BUTTON_ID\n with your button id\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n});\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById(\nYOUR_CUSTOM_BUTTON_ID\n).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerUserForPush(function(success){\n        if (!!success) {\n            //your custom action\n        }\n    });\n}\n\n\n\n\nThe user will see a window asking for permission to receive notifications from your site immediately after clicking on the button.\n\n\nYou can create your own logic and call \nregisterPush()\n method.\n\n\n3.3 Init with Jeapie Widget.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included in every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Add param \ncreateButton\n with value \ntrue\n.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n, \ncreateButton\n: true});\n\n\n\n\nThe interactive button will appear on your site. Click it to open a window in which you will be able to allow sending notifications\n\n\n\n\nImportant\n\n\nYou must keep all the SDK files together. \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n, \npush-worker.js\n and \nmanifest.json\n must be placed in the root directory of your site.\n\n\nLinks to \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n and \nmanifest.json\n must be added between \nhead\n and \n/head\n tags for every page on your website. Linking files this way allows us to be sure that:\n- any page can subscribe to notifications\n- any page can be opened from a notification (if set)\n- changes to the Google Registration id can be updated\n- session count can be accurately calculated\n\n\nThat's It!\n\n\nThat\u2019s it for now - the setup is complete. See our \nWeb SDK API\n for more functions.",
            "title": "Website SDK HTTPS Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#website-sdk-https-installation",
            "text": "Jeapie SDK Installation for Chrome websites (desktop + mobile)  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+   Includes Chrome for Windows, Mac OS X, Linux, Chrome OS, and Android. Chrome for iOS is not yet supported.   HTTP and HTTPS  If some of your pages are served via HTTP instead of HTTPS, then you will need to follow our  HTTP Installation Guide  instead.  If possible, we encourage you to migrate all your pages to HTTPS first, and then continue using this guide.",
            "title": "Website SDK HTTPS Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#1-download-the-sdk",
            "text": "1.1  Download the latest version of Jeapie Chrome Web SDK after the registration of your site in the   Jeapie Dashboard .  1.2  Copy  push-worker.js  and  manifest.json  from  jeapie_sdk_  directory and paste it into the top-level directory (root folder) of your site.",
            "title": "1. Download the SDK"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#2-include-required-files",
            "text": "2.1  Link  https://cdn.jeapie.com/jeapiejs/webpush.js  and  manifest.json  to each page of your website by adding some code between  head  and  /head  tags.  Most likely, you will have to do it just once in the file, which helps to generate a layout of the site. The resulting HTML should look like this:  head \n   script src= https://cdn.jeapie.com/jeapiejs/webpush.js   /script \n   link rel= manifest  href= manifest.json  /head",
            "title": "2. Include Required Files"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#3-initialize-jeapie",
            "text": "3.1 Init with auto register.    Call  Jeapie.init  from a javascript file that is included in every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Add param  autoRegister  with value  true .  var Jeapie = Jeapie || [];\n\nJeapie.init({ appId :  0e9b2d82456a5ad012714e981d972360 ,  autoRegister : true});  The user will see a window asking for permission to receive notifications from your site immediately after opening the page   3.2 Init with your custom button.    Call  Jeapie.init  from a javascript file that is included in every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Create or use your button and update  YOUR_CUSTOM_BUTTON_ID  with your button id  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 });\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById( YOUR_CUSTOM_BUTTON_ID ).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerUserForPush(function(success){\n        if (!!success) {\n            //your custom action\n        }\n    });\n}  The user will see a window asking for permission to receive notifications from your site immediately after clicking on the button.  You can create your own logic and call  registerPush()  method.  3.3 Init with Jeapie Widget.    Call  Jeapie.init  from a javascript file that is included in every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Add param  createButton  with value  true .  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 ,  createButton : true});  The interactive button will appear on your site. Click it to open a window in which you will be able to allow sending notifications   Important  You must keep all the SDK files together.  https://cdn.jeapie.com/jeapiejs/webpush.js ,  push-worker.js  and  manifest.json  must be placed in the root directory of your site.  Links to  https://cdn.jeapie.com/jeapiejs/webpush.js  and  manifest.json  must be added between  head  and  /head  tags for every page on your website. Linking files this way allows us to be sure that:\n- any page can subscribe to notifications\n- any page can be opened from a notification (if set)\n- changes to the Google Registration id can be updated\n- session count can be accurately calculated  That's It!  That\u2019s it for now - the setup is complete. See our  Web SDK API  for more functions.",
            "title": "3. Initialize Jeapie"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/",
            "text": "Website SDK HTTP Installation\n\n\nJeapie SDK Installation for Chrome websites (desktop + mobile)\n\n\nHTTP vs. HTTPS\n\n\nThis is the guide for using Google Chrome push notifications on websites that have some pages served via HTTP instead of HTTPS.\n\n\nIf you are sure that each page is served only via HTTPS, then you should follow [this guide] (Website-SDK-HTTPS-Installation.md)\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\n\n\nIncludes Chrome for Windows, Mac OS X, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.\n\n\n\n\n1. Include Required JeapieSDK.js\n\n\n1.1\n Include \nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n in the the \nhead\n HTML tag of each of your website pages. The best way is to add it to the code that generates the layout for each of your webpages. The resulting HTML should look like this:\n\n\nhead\n\n  \nscript src=\nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n/script\n\n\n/head\n\n\n\n\n\n2. Initialize Jeapie\n\n\nCall \nJeapie.init\n from a javascript file that is included in every page.\n\n\n\n\nUpdate \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId.\n\n\nUpdate \njeapie\n with the name value you entered in our dashboard.\n\n\n\n\n3.1 Init with Jeapie Widget\n \n\n\nCall \nJeapie.init\n from a javascript file that is included in every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Add param \ncreateButton\n with value \ntrue\n.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n, \nsubdomainName\n: \njeapie\n,\ncreateButton\n: true});\n\n\n\n\nThe interactive button will appear on your site. Click it to open a window in which you will be able to allow sending notifications.\n\n\n\n\n3.2 Init with your custom button.\n \n\n\nCall \nJeapie.init\n from a javascript file that is included in every page. Update \n0e9b2d82456a5ad012714e981d972360\n with your Jeapie AppId. Create or use your button and update \nYOUR_CUSTOM_BUTTON_ID\n with your button id.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.init({ \nappKey\n : \n0e9b2d82456a5ad012714e981d972360\n,  \nsubdomainName\n : \njeapie\n });\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById(\nYOUR_CUSTOM_BUTTON_ID\n).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerHttp();\n}\n\n\n\n\nThat's It!\n\n\nThat\u2019s it for now - the setup is complete. See our \nWeb SDK API\n for more functions and \nour examples\n on our Github page.",
            "title": "Website SDK HTTP Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#website-sdk-http-installation",
            "text": "Jeapie SDK Installation for Chrome websites (desktop + mobile)  HTTP vs. HTTPS  This is the guide for using Google Chrome push notifications on websites that have some pages served via HTTP instead of HTTPS.  If you are sure that each page is served only via HTTPS, then you should follow [this guide] (Website-SDK-HTTPS-Installation.md)  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+   Includes Chrome for Windows, Mac OS X, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.",
            "title": "Website SDK HTTP Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#1-include-required-jeapiesdkjs",
            "text": "1.1  Include  https://cdn.jeapie.com/jeapiejs/webpush.js  in the the  head  HTML tag of each of your website pages. The best way is to add it to the code that generates the layout for each of your webpages. The resulting HTML should look like this:  head \n   script src= https://cdn.jeapie.com/jeapiejs/webpush.js /script  /head",
            "title": "1. Include Required JeapieSDK.js"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#2-initialize-jeapie",
            "text": "Call  Jeapie.init  from a javascript file that is included in every page.   Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId.  Update  jeapie  with the name value you entered in our dashboard.   3.1 Init with Jeapie Widget    Call  Jeapie.init  from a javascript file that is included in every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Add param  createButton  with value  true .  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 ,  subdomainName :  jeapie , createButton : true});  The interactive button will appear on your site. Click it to open a window in which you will be able to allow sending notifications.   3.2 Init with your custom button.    Call  Jeapie.init  from a javascript file that is included in every page. Update  0e9b2d82456a5ad012714e981d972360  with your Jeapie AppId. Create or use your button and update  YOUR_CUSTOM_BUTTON_ID  with your button id.  var Jeapie = Jeapie || [];\nJeapie.init({  appKey  :  0e9b2d82456a5ad012714e981d972360 ,   subdomainName  :  jeapie  });\n\n//Replace YOUR_CUSTOM_BUTTON_ID with your button id\ndocument.getElementById( YOUR_CUSTOM_BUTTON_ID ).onclick = registerPush;\n\nfunction registerPush() {\n    Jeapie.registerHttp();\n}  That's It!  That\u2019s it for now - the setup is complete. See our  Web SDK API  for more functions and  our examples  on our Github page.",
            "title": "2. Initialize Jeapie"
        },
        {
            "location": "/Websdk/Website-Generating-a-GCM-Push-Notification-Key/",
            "text": "Website - Generating a GCM Push Notification Key\n\n\nConnect your Google Cloud Messenger enabled website with Jeapie\n\n\nSTEP 1: Create a Google Project and save the \"Project Number\"\n\n\n1.1\n Create a project at https://console.developers.google.com/project for your app.\n\n\n\n\n1.2\n Select your Project and click on \"Overview\". Your project number should be located on this page.\n\n\n\n\nCopy the \"Project Number\" from this page.\n\n\nYou will need to enter this into your app later when you follow the SDK guide.\n\n\nSTEP 2: Turn on both \"Google Cloud Messaging for Chrome\" and \"Google Cloud Messaging for Android\" APIs\n\n\n2.\n Under APIs \n auth\nAPIs, find \"Google Cloud Messaging for Chrome.\" Turn it on. You will need this for desktop notifications.\n\n\nFind \"Google Cloud Messaging for Android\" and turn it on. You need this so that an Android Chrome browser can send system notifications to an Android user.\n\n\n\n\n\n\nSTEP 3: Create and save Server Key\n\n\n3.1\n Under \"APIs \n auth\" \n \"Credentials\", click \"Create new key\".\n\n\n\n\n3.2\n Select \"Server key\".\n\n\n\n\n3.3\n Press the \"Create\" button.\n\n\nIMPORTANT\n\n\nDO NOT enter anything into the box.\n\n\n\n\n3.4\n Copy the \"API Key\". You will need it to configure your project using Jeapie\n\n\n\n\nSTEP 4: Configure your Chrome Website with Jeapie\n\n\n4.1\n Log into Jeapie. In the dashboard, select \"Application Settings\" then press the \"Configure\" button to the right of \"Chrome Website (GCM)\".\n\n\n4.2\n Paste your Google API Key in here and press Save.\n\n\n\n\n\n\nConfiguration for sending Chrome Website push notifications is complete!\n\n\nNext step is setting up the Chrome Website SDK\n\n\n\n\nFollow our \nWebsite SDK HTTPS Installation\n guide if your website uses an HTTPS connection.\n\n\nOr follow our \nWebsite SDK HTTP Installation\n guide if your website is Non-HTTPS. (Uses an HTTP connection).",
            "title": "Website - Generating Your Own a GCM Key"
        },
        {
            "location": "/Websdk/Website-Generating-a-GCM-Push-Notification-Key/#website-generating-a-gcm-push-notification-key",
            "text": "Connect your Google Cloud Messenger enabled website with Jeapie",
            "title": "Website - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Websdk/Website-Generating-a-GCM-Push-Notification-Key/#step-1-create-a-google-project-and-save-the-project-number",
            "text": "1.1  Create a project at https://console.developers.google.com/project for your app.   1.2  Select your Project and click on \"Overview\". Your project number should be located on this page.   Copy the \"Project Number\" from this page.  You will need to enter this into your app later when you follow the SDK guide.",
            "title": "STEP 1: Create a Google Project and save the \"Project Number\""
        },
        {
            "location": "/Websdk/Website-Generating-a-GCM-Push-Notification-Key/#step-2-turn-on-both-google-cloud-messaging-for-chrome-and-google-cloud-messaging-for-android-apis",
            "text": "2.  Under APIs   auth APIs, find \"Google Cloud Messaging for Chrome.\" Turn it on. You will need this for desktop notifications.  Find \"Google Cloud Messaging for Android\" and turn it on. You need this so that an Android Chrome browser can send system notifications to an Android user.",
            "title": "STEP 2: Turn on both \"Google Cloud Messaging for Chrome\" and \"Google Cloud Messaging for Android\" APIs"
        },
        {
            "location": "/Websdk/Website-Generating-a-GCM-Push-Notification-Key/#step-3-create-and-save-server-key",
            "text": "3.1  Under \"APIs   auth\"   \"Credentials\", click \"Create new key\".   3.2  Select \"Server key\".   3.3  Press the \"Create\" button.  IMPORTANT  DO NOT enter anything into the box.   3.4  Copy the \"API Key\". You will need it to configure your project using Jeapie",
            "title": "STEP 3: Create and save Server Key"
        },
        {
            "location": "/Websdk/Website-Generating-a-GCM-Push-Notification-Key/#step-4-configure-your-chrome-website-with-jeapie",
            "text": "4.1  Log into Jeapie. In the dashboard, select \"Application Settings\" then press the \"Configure\" button to the right of \"Chrome Website (GCM)\".  4.2  Paste your Google API Key in here and press Save.    Configuration for sending Chrome Website push notifications is complete!  Next step is setting up the Chrome Website SDK   Follow our  Website SDK HTTPS Installation  guide if your website uses an HTTPS connection.  Or follow our  Website SDK HTTP Installation  guide if your website is Non-HTTPS. (Uses an HTTP connection).",
            "title": "STEP 4: Configure your Chrome Website with Jeapie"
        },
        {
            "location": "/Websdk/Website-SDK-API/",
            "text": "Website SDK API\n\n\nJavaScript Async\n\n\nThe example assumes that you have the following code placed defined before calling Jeapie functions:\n\n\nscript src=\nhttps://cdn.jeapie.com/jeapiejs/webpush.js\n \n/script\n\n\nscript\nvar Jeapie = Jeapie || [];\n/script\n\n\n\n\n\nList of Functions\n\n\n\n\ninit\n\n\nregisterUserForPush\n\n\naddTag\n\n\nsetTags\n\n\nremoveTag\n\n\nremoveAllTags\n\n\nsetAlias\n\n\nisPushManagerSupported\n\n\ngetSubscription\n\n\n\n\nFunctions\n\n\ninit\n\n\nThis is the only required method that you need to call for setting up Jeapie to receive push notifications. Call it from each page of your site.\n\n\n\n\nParameters\n\n\nJSON\n \noptions\n\n\nString\n \nappKey (Required) \n-Your Jeapie app id can be found on the settings page at jeapie.com.\n\n\nBoolean\n \nautoRegister (Optional)\n - Automatically show browser prompt to accept notifications. You can pass in \"false\" to delay this pop-up and then call \nregisterUserForPush\n to prompt them later.\n\n\nBoolean\n \ncreateButton (Optional)\n -  It creates a default button that generates a window for receipt of the notifications, which appears after clicking\n\n\nBoolean\n \nsubdomainName (Required for HTTP sites)\n \n\n\nString\n \ntooltipText (Optional, use only with createButton)\n - Default \nOne click subscription to our newsletter!\n. Set the text that will be shown to users on a default button.\n\n\n\n\nExample\n\n\n\nvar Jeapie = Jeapie || [];\n\nJeapie.init(\nappKey\n: \nYOUR_JEAPIE_APP_KEY\n);\n\n\n\n\nregisterUserForPush\n\n\nCall it when you want to prompt the user to accept push notifications. Only call if you set \"false\" in \nautoRegister:\n when called \"init\".\n\n\nExample\n\n\nJeapie.registerUserForPush(callback);\n\n\n\n\naddTag\n\n\nTags a user based on an app event of your choosing so that later you can create segments on \njeapie.com\n to target these users. Recommend using setTags over addTag if you need to set more than one tag on a user at a time.\n\n\n\n\nParameters\n\n\nstring\n \nvalue\n - Value to set.\n\n\n\n\nExample\n\n\nJeapie.addTag(\nvalue\n);\n\n\n\n\nsetTags\n\n\nTag a user based on an app event of your choosing so later you can create segments on \njeapie.com\n to target these users.\n\n\n\n\nParameters\n\n\nJSON\n \nvalues\n - Values of your choosing to create.\n\n\n\n\nExample\n\n\nJeapie.setTags({\nvalue1\n, \nvalue2\n});\n\n\n\n\nremoveTag\n\n\nDeletes a tag that was previously set for a user with \naddTag\n or \nsetTags\n. Use \nremoveAllTags\n if you need to delete all of them.\n\n\n\n\nParameters\n\n\nString\n \nvalue\n - Value to remove.\n\n\n\n\nExample\n\n\nJeapie.removeTag(\nvalue\n);\n\n\n\n\nremoveAllTags\n\n\nDeletes all tags that were previously set for a user with \naddTag\n or \nsetTags\n.\n\n\nExample\n\n\nJeapie.removeAllTags();\n\n\n\n\nsetAlias\n\n\nSet a unique alias for each user of \njeapie.com\n to target these users. \n\n\n\n\nParameters\n\n\nstring\n \nvalue\n - Value to set.\n\n\n\n\nExample\n\n\nJeapie.setAlias(\nvalue\n);\n\n\n\n\nisPushManagerSupported\n\n\nReturns \"true\" If the browser of current viewer of the page supports push notifications.\n\n\nJeapie.isPushManagerSupported();\n\n\n\n\ngetSubscription\n\n\nLets you retrieve the Google Registration ID. Your handler is called after the device is successfully registered with Jeapie.\n\n\nExample\n\n\nJeapie.getSubscription(function (subscriptionId) {\n    if (subscriptionId) {\n        console.log(subscriptionId);\n    }\n});",
            "title": "Website SDK API"
        },
        {
            "location": "/Websdk/Website-SDK-API/#website-sdk-api",
            "text": "JavaScript Async  The example assumes that you have the following code placed defined before calling Jeapie functions:  script src= https://cdn.jeapie.com/jeapiejs/webpush.js   /script  script var Jeapie = Jeapie || []; /script",
            "title": "Website SDK API"
        },
        {
            "location": "/Websdk/Website-SDK-API/#list-of-functions",
            "text": "init  registerUserForPush  addTag  setTags  removeTag  removeAllTags  setAlias  isPushManagerSupported  getSubscription",
            "title": "List of Functions"
        },
        {
            "location": "/Websdk/Website-SDK-API/#functions",
            "text": "init  This is the only required method that you need to call for setting up Jeapie to receive push notifications. Call it from each page of your site.   Parameters  JSON   options  String   appKey (Required)  -Your Jeapie app id can be found on the settings page at jeapie.com.  Boolean   autoRegister (Optional)  - Automatically show browser prompt to accept notifications. You can pass in \"false\" to delay this pop-up and then call  registerUserForPush  to prompt them later.  Boolean   createButton (Optional)  -  It creates a default button that generates a window for receipt of the notifications, which appears after clicking  Boolean   subdomainName (Required for HTTP sites)    String   tooltipText (Optional, use only with createButton)  - Default  One click subscription to our newsletter! . Set the text that will be shown to users on a default button.   Example  \nvar Jeapie = Jeapie || [];\n\nJeapie.init( appKey :  YOUR_JEAPIE_APP_KEY );  registerUserForPush  Call it when you want to prompt the user to accept push notifications. Only call if you set \"false\" in  autoRegister:  when called \"init\".  Example  Jeapie.registerUserForPush(callback);  addTag  Tags a user based on an app event of your choosing so that later you can create segments on  jeapie.com  to target these users. Recommend using setTags over addTag if you need to set more than one tag on a user at a time.   Parameters  string   value  - Value to set.   Example  Jeapie.addTag( value );  setTags  Tag a user based on an app event of your choosing so later you can create segments on  jeapie.com  to target these users.   Parameters  JSON   values  - Values of your choosing to create.   Example  Jeapie.setTags({ value1 ,  value2 });  removeTag  Deletes a tag that was previously set for a user with  addTag  or  setTags . Use  removeAllTags  if you need to delete all of them.   Parameters  String   value  - Value to remove.   Example  Jeapie.removeTag( value );  removeAllTags  Deletes all tags that were previously set for a user with  addTag  or  setTags .  Example  Jeapie.removeAllTags();  setAlias  Set a unique alias for each user of  jeapie.com  to target these users.    Parameters  string   value  - Value to set.   Example  Jeapie.setAlias( value );  isPushManagerSupported  Returns \"true\" If the browser of current viewer of the page supports push notifications.  Jeapie.isPushManagerSupported();  getSubscription  Lets you retrieve the Google Registration ID. Your handler is called after the device is successfully registered with Jeapie.  Example  Jeapie.getSubscription(function (subscriptionId) {\n    if (subscriptionId) {\n        console.log(subscriptionId);\n    }\n});",
            "title": "Functions"
        },
        {
            "location": "/API/Server-API-Overview/",
            "text": "Server API Overview\n\n\nThe Jeapie Server API serves purpose of programmatically delivering notifications from your server to user\u2019s device or from one mobile device to another.\n\n\nAuthentication\n\n\nAPI requests are identified using \nHTTP basic authentication\n.\n\nUse the application key (\n\"APP_KEY\"\n) as your username.\n\nUse the application secret (\n\"APP_SECRET\"\n) as your password.\n\n\nYou can find API key of your mobile/web application here:\n\n\n\nCode example\n\n\n// via shell\n// example APP_KEY = 1e26f7bb3f81e1ab789d3e20b9cf6325\n// example APP_SECRET = 9bb59fcbff38b85647c421c65cca06ce\ncurl -X \\\n    -u \n1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce\n \\\n    -H \nContent-Type: application/json\n \\\n    https://app.jeapie.com/api/v2/push.json\n\n// or\ncurl -X \\\n    -u \n1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce\n \\\n    -H \nContent-Type: application/json\n \\\n    https://app.jeapie.com/api/v2/push.json",
            "title": "Server API Overview"
        },
        {
            "location": "/API/Server-API-Overview/#server-api-overview",
            "text": "The Jeapie Server API serves purpose of programmatically delivering notifications from your server to user\u2019s device or from one mobile device to another.",
            "title": "Server API Overview"
        },
        {
            "location": "/API/Server-API-Overview/#authentication",
            "text": "API requests are identified using  HTTP basic authentication . \nUse the application key ( \"APP_KEY\" ) as your username. \nUse the application secret ( \"APP_SECRET\" ) as your password.  You can find API key of your mobile/web application here:  Code example  // via shell\n// example APP_KEY = 1e26f7bb3f81e1ab789d3e20b9cf6325\n// example APP_SECRET = 9bb59fcbff38b85647c421c65cca06ce\ncurl -X \\\n    -u  1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce  \\\n    -H  Content-Type: application/json  \\\n    https://app.jeapie.com/api/v2/push.json\n\n// or\ncurl -X \\\n    -u  1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce  \\\n    -H  Content-Type: application/json  \\\n    https://app.jeapie.com/api/v2/push.json",
            "title": "Authentication"
        },
        {
            "location": "/API/notifications-Create-Notification/",
            "text": "api/v2/push.json Send Push Notification via API\n\n\nEndpoint\n\n\nhttps://go.jeapie.com/api/v2/push.json\n\n\nMethod\n\n\nPost\n\n\nAuthentication\n\n\nClick the following link to read about \nJeapie authentication\n.\n\n\nFull example for Mobile platforms\n\n\n    {\n        // This params are cross-platform for all platforms\n        \nsend_date\n:\nnow\n, // or UNIX_TIME. Optional\n        \nmessage\n: \npush text\n,   // Required\n        \ndata\n:{\nkey\n: \nvalue\n}, // Optional\n        \nplatforms\n: [\nandroid\n, \nios\n], // Optional\n        \nbadge\n: \ninc\n, or number [0-999] // Optional\n        \ndefault_sound\n: 1, // Optional\n        \nttl\n: 3600, // Optional\n\n        // Android additional settings. Optional\n        \nandroid\n: {\n            \nsound\n : \nsoundfile\n,\n            \nheader\n:\nheader\n,\n            \nicon\n: \nicon\n,\n            \ncustom_icon\n: \nhttp://example.com/image.png\n,\n            \nbanner\n: \nhttp://example.com/banner.png\n\n        },\n\n        // iOS (in development). Optional\n        \nios\n: {\n            \nbadge\n: 5,\n            \nsound\n: \nfile.wav\n, // or \ndefault\n\n            \ncategory_id\n: \n1\n, // iOS new feature\n            \ncontent-available\n: 1\n        },\n\n        // Send to all devices\n        \naudience\n: {\n            \nall\n: 1 // send to all devices\n        }\n    }\n\n\n\n\nFull example for Web platforms\n\n\n{\n        // This params are cross-platform for all platforms\n        \nsend_date\n:\nnow\n, // or UNIX_TIME. Optional\n        \nmessage\n: \npush text\n,  // Required\n        \nplatforms\n: [\nchrome\n, \nsafari\n], // Optional\n        \nttl\n: 3600, // Optional\n\n        // Safari related (in development). Optional\n        \nsafari\n: { \n            \ntitle\n: \nTitle\n,\n            \naction\n: \nClick here\n,\n            \naction_url\n: \nhttp://example.com\n,\n            \nttl\n: 3600\n        },\n\n        // Chrome related (in development). Optional\n        \nchrome\n: {\n            \nheader\n: \ntitle example\n,\n            \nicon\n: \nhttp://example.com/icon.png\n,\n            \nredirect_url\n: \n/example.html\n // Default\n        },\n\n\n        // you should use only one of this params\n        \naudience\n: {\n            \nall\n: 1 // send to all devices\n        }\n    }\n\n\n\n\nDescription of the params\n\n\nCross-platform params\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsend_date\n \nOptional\n\n\nMixed\n: String or Int \n \ndefault:\n \n\"now\"\n\n\n\n\n\n\n\n\nTime for scheduled push. Can be \"now\" or UNIX_TIME \n Example: \n \n\"send_date\": \"now\"\n or \n\"send_date\": 1430568855\n\n\n\n\n\n\nmessage\n \nRequired\n\n\nString\n \n \nRequired unless content_available=true\n\n\n\n\n\n\n\n\nPush text. Example: \n \n\"message\": \"hello, world\"\n\n\n\n\n\n\ndata\n \nOptional\n\n\nHash\n\n\n\n\n\n\n\n\nExtra data for push. Can contain additional data for for processing within the application. Example: \n \n\"data\": {\"page\": 1, \"url\": \"http://example.com}\"\n\n\n\n\n\n\nbadge\n \nOptional\n\n\nMixed\n: String or Int\n\n\n\n\n\n\n\n\nOnly for iphone and windows phone. For setting badge number use int, for incrementing badge number use \"inc\". Example: \n \n\"badge\": 3\n or \n\"badge\": \"inc\"\n\n\n\n\n\n\nplatforms\n \nOptional\n\n\nArray\n \n List of mobile platforms: \"android\" \n List of web platforms: \"chrome\", \"safari\"\n\n\n\n\n\n\n\n\nList of platforms. Example: \n if mobile platforms: \n\"platforms\": [\"android\", \"ios\"]\n \n or if web platforms: \n\"platforms\": [\"chrome\", \"safari\"]\n\n\n\n\n\n\ndefault_sound\n \nOptional\n\n\nInt\n: \n0\n or \n1\n \n \ndefault:\n \n0\n\n\n\n\n\n\n\n\nIf you need default sound set \n1\n else \n0\n. Example: \n \n\"default_sound\": 1\n\n\n\n\n\n\nttl\n \nOptional\n\n\nInt\n \n \ndefault:\n \n3600\n\n\n\n\n\n\n\n\n\"Time to live\" parameter - the maximum lifespan of a message in seconds. \nExample: \n\"ttl\":3600\n\n\n\n\n\n\n\n\nAndroid params \n(All params are optional)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsound\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nSound file name in the \"res/raw\" folder, do not include the extension. \n Example: \n\"sound\": \"taff\"\n\n\n\n\n\n\nheader\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nAndroid notification header. \nExample: \n\"header\": \"Header text\"\n\n\n\n\n\n\nicon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nIcon file name in the \"res/drawable\" folder. \nExample: \n\"icon\":\"icon.png\"\n\n\n\n\n\n\ncustom_icon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nFull path to icon file (http url) \nExample: \n\"custom_icon\": \"http://example.com/icon.png\"\n\n\n\n\n\n\nbanner\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nFull path to banner file (http url) \nExample: \n\"banner\": \"http://example.com/banner.png\"\n\n\n\n\n\n\n\n\nChrome params \n(All params are optional)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nChrome notification header. \nExample: \n\"header\": \"Header text\"\n\n\n\n\n\n\nicon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nFull path to icon file (http url \nExample: \n\"icon\": \"http://example.com/icon.png\"\n\n\n\n\n\n\nredirect_url\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nThe relative url which is opened after clicking on a push. \nExample: \n\"redirect_url\": \"/example.html\"\n\n\n\n\n\n\n\n\niOS params \n(In development)\n\n\nSafari params \n(In development)\n\n\nAudience \n(Required)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nall\n\n\nInt\n\n\n\n\n\n\n\n\nsend to all devices. \n Example: \n\"all\": 1\n\n\n\n\n\n\ntokens\n\n\nArray\n\n\n\n\n\n\n\n\nSend to array of device (browser) tokens. Limit is 100 tokens. Example: \n \n\"tokens\": [\"dec301908b9ba...8df85e57a58e40f96f\", \"523f4c2068674f1fe...2ba25cdc250a2a41\"]\n\n\n\n\n\n\naliases\n\n\nArray\n\n\n\n\n\n\n\n\nArray of device aliases set by sdk in mobile app or on web. Example: \n \n\"aliases\": [\"own_id_device_1\", \"own_id_device_2\", \"own_id_device_3\"]\n\n\n\n\n\n\n\n\nResult Format\n\n\n\n\n200 OK\n\n\n\n\n{\n    \nid\n:\n55704a589e31ab441e8b4569\n,\n    \nstatus\n:\ncompleted\n,\n    \nmessage\n:\ntest\n,\n    \nextra_data\n:[],\n    \nplatforms\n:\nAndroid\n,\n    \nbadge\n:\ninc\n,\n    \ndefault_sound\n:\n1\n,\n    \nttl\n:3600\n}\n\n\n\n\nShell Code Examples\n\n\nSend push to all platforms and all devices immediately:\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \ntest\n,\n        \naudience\n: {\n            \nall\n: 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json\n\n\n\n\nSend push only to android devices with aliases setted in mobile app:\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \ntest\n,\n        \nplatforms\n: [\nandroid\n],\n        \nandroid\n: {\n            \nheader\n: \ntitle\n\n        },\n        \naudience\n: {\n            \naliases\n: [\nsome_id1\n, \nsome_id2\n, \nemail@example.com\n]\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json\n\n\n\n\nSend push to Chrome and redirect to page after clicking on push\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \nPush message\n,\n        \nplatforms\n: [\nchrome\n],\n        \nchrome\n: {\n            \nheader\n: \ntitle message\n,\n            \nicon\n: \nhttp://example.com/icon.png\n,\n            \nredirect_url\n: \n/relative_url.html\n\n        },\n        \naudience\n: {\n            \nall\n: 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json",
            "title": "Send Push Notification"
        },
        {
            "location": "/API/notifications-Create-Notification/#apiv2pushjson-send-push-notification-via-api",
            "text": "Endpoint  https://go.jeapie.com/api/v2/push.json  Method  Post  Authentication  Click the following link to read about  Jeapie authentication .  Full example for Mobile platforms      {\n        // This params are cross-platform for all platforms\n         send_date : now , // or UNIX_TIME. Optional\n         message :  push text ,   // Required\n         data :{ key :  value }, // Optional\n         platforms : [ android ,  ios ], // Optional\n         badge :  inc , or number [0-999] // Optional\n         default_sound : 1, // Optional\n         ttl : 3600, // Optional\n\n        // Android additional settings. Optional\n         android : {\n             sound  :  soundfile ,\n             header : header ,\n             icon :  icon ,\n             custom_icon :  http://example.com/image.png ,\n             banner :  http://example.com/banner.png \n        },\n\n        // iOS (in development). Optional\n         ios : {\n             badge : 5,\n             sound :  file.wav , // or  default \n             category_id :  1 , // iOS new feature\n             content-available : 1\n        },\n\n        // Send to all devices\n         audience : {\n             all : 1 // send to all devices\n        }\n    }  Full example for Web platforms  {\n        // This params are cross-platform for all platforms\n         send_date : now , // or UNIX_TIME. Optional\n         message :  push text ,  // Required\n         platforms : [ chrome ,  safari ], // Optional\n         ttl : 3600, // Optional\n\n        // Safari related (in development). Optional\n         safari : { \n             title :  Title ,\n             action :  Click here ,\n             action_url :  http://example.com ,\n             ttl : 3600\n        },\n\n        // Chrome related (in development). Optional\n         chrome : {\n             header :  title example ,\n             icon :  http://example.com/icon.png ,\n             redirect_url :  /example.html  // Default\n        },\n\n\n        // you should use only one of this params\n         audience : {\n             all : 1 // send to all devices\n        }\n    }  Description of the params  Cross-platform params           send_date   Optional  Mixed : String or Int    default:   \"now\"     Time for scheduled push. Can be \"now\" or UNIX_TIME   Example:    \"send_date\": \"now\"  or  \"send_date\": 1430568855    message   Required  String     Required unless content_available=true     Push text. Example:    \"message\": \"hello, world\"    data   Optional  Hash     Extra data for push. Can contain additional data for for processing within the application. Example:    \"data\": {\"page\": 1, \"url\": \"http://example.com}\"    badge   Optional  Mixed : String or Int     Only for iphone and windows phone. For setting badge number use int, for incrementing badge number use \"inc\". Example:    \"badge\": 3  or  \"badge\": \"inc\"    platforms   Optional  Array    List of mobile platforms: \"android\"   List of web platforms: \"chrome\", \"safari\"     List of platforms. Example:   if mobile platforms:  \"platforms\": [\"android\", \"ios\"]    or if web platforms:  \"platforms\": [\"chrome\", \"safari\"]    default_sound   Optional  Int :  0  or  1     default:   0     If you need default sound set  1  else  0 . Example:    \"default_sound\": 1    ttl   Optional  Int     default:   3600     \"Time to live\" parameter - the maximum lifespan of a message in seconds.  Example:  \"ttl\":3600     Android params  (All params are optional)           sound   Optional  String     Sound file name in the \"res/raw\" folder, do not include the extension.   Example:  \"sound\": \"taff\"    header   Optional  String     Android notification header.  Example:  \"header\": \"Header text\"    icon   Optional  String     Icon file name in the \"res/drawable\" folder.  Example:  \"icon\":\"icon.png\"    custom_icon   Optional  String     Full path to icon file (http url)  Example:  \"custom_icon\": \"http://example.com/icon.png\"    banner   Optional  String     Full path to banner file (http url)  Example:  \"banner\": \"http://example.com/banner.png\"     Chrome params  (All params are optional)           header   Optional  String     Chrome notification header.  Example:  \"header\": \"Header text\"    icon   Optional  String     Full path to icon file (http url  Example:  \"icon\": \"http://example.com/icon.png\"    redirect_url   Optional  String     The relative url which is opened after clicking on a push.  Example:  \"redirect_url\": \"/example.html\"     iOS params  (In development)  Safari params  (In development)  Audience  (Required)           all  Int     send to all devices.   Example:  \"all\": 1    tokens  Array     Send to array of device (browser) tokens. Limit is 100 tokens. Example:    \"tokens\": [\"dec301908b9ba...8df85e57a58e40f96f\", \"523f4c2068674f1fe...2ba25cdc250a2a41\"]    aliases  Array     Array of device aliases set by sdk in mobile app or on web. Example:    \"aliases\": [\"own_id_device_1\", \"own_id_device_2\", \"own_id_device_3\"]     Result Format   200 OK   {\n     id : 55704a589e31ab441e8b4569 ,\n     status : completed ,\n     message : test ,\n     extra_data :[],\n     platforms : Android ,\n     badge : inc ,\n     default_sound : 1 ,\n     ttl :3600\n}",
            "title": "api/v2/push.json Send Push Notification via API"
        },
        {
            "location": "/API/notifications-Create-Notification/#shell-code-examples",
            "text": "Send push to all platforms and all devices immediately:  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  test ,\n         audience : {\n             all : 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json  Send push only to android devices with aliases setted in mobile app:  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  test ,\n         platforms : [ android ],\n         android : {\n             header :  title \n        },\n         audience : {\n             aliases : [ some_id1 ,  some_id2 ,  email@example.com ]\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json  Send push to Chrome and redirect to page after clicking on push  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  Push message ,\n         platforms : [ chrome ],\n         chrome : {\n             header :  title message ,\n             icon :  http://example.com/icon.png ,\n             redirect_url :  /relative_url.html \n        },\n         audience : {\n             all : 1\n        }\n     }' \\\n     https://jeapie.com/api/v2/push.json",
            "title": "Shell Code Examples"
        }
    ]
}