{
    "docs": [
        {
            "location": "/",
            "text": "DOCUMENTATION\n\n\n\nGetting Started\n\n\nIOS\n\n\n\n\n\niOS Native SDK Overview\n\n\nGenerating an iOS Push Certificate\n\n\niOS Native SDK Installation\n\n\niOS Native SDK API\n\n\n\n\nANDROID\n\n\n\n\n\nAndroid Native SDK Overview\n\n\nAndroid - Generating a GCM Push Notification Key\n\n\nAndroid Native SDK Installation\n\n\n\n\n\n\nWEBSITES (Chrome, Yandex \n&\n Safari)\n\n\n\n\n\nWebsite SDK Overview\n\n\n\n\nWebsite SDK HTTPS Installation\n\n\nWebsite SDK HTTP Installation\n\n\nWebsite SDK API\n\n\n\n\nSERVER API\n\n\n\n\n\nServer API Overview\n\n\nSend Push via Rest API",
            "title": "Home"
        },
        {
            "location": "/Getting-Started/",
            "text": "Getting Started\n\n\n\nWhat is Jeapie?\n\n\n\nJeapie is a simple and reliable push notification system built for mobile and web applications. Jeapie supports all major mobile app development platforms.\n\n\nSetup Instructions\n\n\n\nGet started by selecting your platform below:\n\n\n\n\n\n\n\n\nPlatform\n\n\nSetup Instructions\n\n\n\n\n\n\n\n\n\n\nNative Android\n\n\nUsing Jeapie in your Android App\n\n\n\n\n\n\nNative iOS\n\n\nUsing Jeapie in your iOS App\n\n\n\n\n\n\nChrome \n Safari Web Notifications\n\n\nUsing Jeapie Push on your Website\n\n\n\n\n\n\nImplement your own plugin\n\n\nUsing the Jeapie Server API\n\n\n\n\n\n\nNone of the above\n\n\nContact us at \nsupport@jeapie.com\n and we'll help get you running.",
            "title": "Getting Started"
        },
        {
            "location": "/iOS/iOS-Native-SDK-Overview/",
            "text": "iOS Native SDK Overview\n\n\nTo get Jeapie Push Notifications running on iOS follow two steps:\n\n\nStep 1: Generate an iOS Push Certificate\n\n\nGenerate an iOS Push Certificate\n\n\nWhat are iOS Push Certificates?\n\n\nThe Apple Push Notification Service (APNs) is a service created by Apple Inc. way back in 2009 to securely send push notifications from third party apps to their users' Apple devices.\n\n\nYour backend sends notifications through Apple's servers to your application. To ensure that unwanted parties are not sending notifications to your application, Apple needs to know that only your servers can connect with theirs.\n\n\nApple, therefore, requires you to create an SSL certificate. Although app provisioning can be confusing at times, follow along and it'll only take two minutes.\n\n\nStep 2: Install the Jeapie iOS SDK\n\n\nInstall the Jeapie iOS SDK",
            "title": "iOS Native SDK Overview"
        },
        {
            "location": "/iOS/iOS-Native-SDK-Overview/#ios-native-sdk-overview",
            "text": "To get Jeapie Push Notifications running on iOS follow two steps:",
            "title": "iOS Native SDK Overview"
        },
        {
            "location": "/iOS/iOS-Native-SDK-Overview/#step-1-generate-an-ios-push-certificate",
            "text": "Generate an iOS Push Certificate  What are iOS Push Certificates?  The Apple Push Notification Service (APNs) is a service created by Apple Inc. way back in 2009 to securely send push notifications from third party apps to their users' Apple devices.  Your backend sends notifications through Apple's servers to your application. To ensure that unwanted parties are not sending notifications to your application, Apple needs to know that only your servers can connect with theirs.  Apple, therefore, requires you to create an SSL certificate. Although app provisioning can be confusing at times, follow along and it'll only take two minutes.",
            "title": "Step 1: Generate an iOS Push Certificate"
        },
        {
            "location": "/iOS/iOS-Native-SDK-Overview/#step-2-install-the-jeapie-ios-sdk",
            "text": "Install the Jeapie iOS SDK",
            "title": "Step 2: Install the Jeapie iOS SDK"
        },
        {
            "location": "/iOS/Generating-an-iOS-Push-Certificate/",
            "text": "Generating an iOS Push Certificate\n\n\nThe goals of this section are to provision your app with Apple and grant Jeapie access to manage your notifications.\n\n\n1. Create Certificate Signing Request\n\n\n1.1\n Open Keychain Access on your Mac (it is located in Applications/Utilities) and \nchoose the menu option \nRequest a Certificate from a Certificate Authority\u2026\n.\n\n\n\n\n1.2\n Save Certificate\n\n\nYou should now see the following window:\n\n\n\n\nEnter your email address here. Some people recommend using the same email address \nthat you used to sign up for the iOS Developer Program, \nbut it seems to accept any email address just fine.\n\n\nCheck \nSaved to disk\n and click \nContinue\n.\n\n\n2. Enable Push Notifications and apply the Certification Request to generate Certificate\n\n\n2.1\n Select your app on the \nApple's Developer\n site and press \"Edit\"\n\n\n\n\n2.2\n Scroll down to the bottom, enable Push Notifications and press \"Create Certificate...\" \nin either Development or Production section.\n\n\nHere's the difference between each kind of certificates:\n\n\n\n\n\n\nSandbox Push Certificate\n (Also known as Development) - For sending push notifications to a development version of your app that was built with an Apple Development provisioning profile.\n\n\n\n\n\n\nProduction Push Certificate\n - For production builds that are built with an Apple \"App Store\" provisioning profile and are submitted to the \u201cApp store\u201d provisioning profile, or for testing push notifications in an Ad-Hoc build built with an Apple \"Ad Hoc\" provisioning profile.\n\n\n\n\n\n\nBasically, you will want to start with a Sandbox (Development) Push Certificate when developing or updating your app. \nThen, build your app with an \"Ad Hoc\" Provisioning Profile and Production Push Certificate. \nMake sure it receives push notifications before submitting it. \nFinally, continue using the production push certificate when submitting your app.\n\n\n\n\n2.3\n Press Continue\n\n\n\n\n2.4\n Press \"Choose File..\", select the \"certSigningRequest\" file you saved in Step 1, \nopen, and then press \"Generate\".\n\n\n\n\n2.5\n Press \n\"Download\"\n to save your certificate\n\n\n\n\n3. Creating a p12 File\n\n\n3.1\n Open the .cer file you downloaded in the last step by double clicking on it in Finder.\n\n\n\n\n3.2\n After a few seconds the \"Keychain Access\" program should pop up. Select \nLogin\n \n \nKeys\n, then right click on your key in the list and select \"Export\"\n\n\n\n\n3.3\n Give the unique name to file and press save. \nYou will have an option to protect the file with a password. \n\nPlease don't protect this file with a password!\n\n\n4. Upload Your Push Certificate to Jeapie\n\n\n4.1\n At the Step 2 \"Push notification settings\" please select the Production or Development APNS push services.\n\n\n\n\n4.2\n Select the .p12 you exported without a password and press Save.\n\n\n\n\nCongratulations! Jeapie is now set up to push out notifications to your app!\n\n\nNext, install the Jeapie SDK for your app \niOS Native SDK Installation",
            "title": "Generating an iOS Push Certificate"
        },
        {
            "location": "/iOS/Generating-an-iOS-Push-Certificate/#generating-an-ios-push-certificate",
            "text": "The goals of this section are to provision your app with Apple and grant Jeapie access to manage your notifications.  1. Create Certificate Signing Request  1.1  Open Keychain Access on your Mac (it is located in Applications/Utilities) and \nchoose the menu option  Request a Certificate from a Certificate Authority\u2026 .   1.2  Save Certificate  You should now see the following window:   Enter your email address here. Some people recommend using the same email address \nthat you used to sign up for the iOS Developer Program, \nbut it seems to accept any email address just fine.  Check  Saved to disk  and click  Continue .  2. Enable Push Notifications and apply the Certification Request to generate Certificate  2.1  Select your app on the  Apple's Developer  site and press \"Edit\"   2.2  Scroll down to the bottom, enable Push Notifications and press \"Create Certificate...\" \nin either Development or Production section.  Here's the difference between each kind of certificates:    Sandbox Push Certificate  (Also known as Development) - For sending push notifications to a development version of your app that was built with an Apple Development provisioning profile.    Production Push Certificate  - For production builds that are built with an Apple \"App Store\" provisioning profile and are submitted to the \u201cApp store\u201d provisioning profile, or for testing push notifications in an Ad-Hoc build built with an Apple \"Ad Hoc\" provisioning profile.    Basically, you will want to start with a Sandbox (Development) Push Certificate when developing or updating your app. \nThen, build your app with an \"Ad Hoc\" Provisioning Profile and Production Push Certificate. \nMake sure it receives push notifications before submitting it. \nFinally, continue using the production push certificate when submitting your app.   2.3  Press Continue   2.4  Press \"Choose File..\", select the \"certSigningRequest\" file you saved in Step 1, \nopen, and then press \"Generate\".   2.5  Press  \"Download\"  to save your certificate   3. Creating a p12 File  3.1  Open the .cer file you downloaded in the last step by double clicking on it in Finder.   3.2  After a few seconds the \"Keychain Access\" program should pop up. Select  Login     Keys , then right click on your key in the list and select \"Export\"   3.3  Give the unique name to file and press save. \nYou will have an option to protect the file with a password.  Please don't protect this file with a password!  4. Upload Your Push Certificate to Jeapie  4.1  At the Step 2 \"Push notification settings\" please select the Production or Development APNS push services.   4.2  Select the .p12 you exported without a password and press Save.   Congratulations! Jeapie is now set up to push out notifications to your app!  Next, install the Jeapie SDK for your app  iOS Native SDK Installation",
            "title": "Generating an iOS Push Certificate"
        },
        {
            "location": "/iOS/iOS-Native-SDK-Installation/",
            "text": "iOS Native SDK Installation\n\n\n1. Download latest Jeapie iOS sdk from github\n\n\nhttps://github.com/Jeapie/jeapie-ios\n\n\n2. Copy \njeapie\n folder into root of your ios mobile app\n\n\n3. Select \"Build Phases\" and go to \"Link Binary With Libraries\".\n\n\n\n\nYou should see jeapie-sdk-x.x.x.a library\n\n\n4. Add \"-ObjC\" linker flag to \"Other Linker Flags\" in Build Settings\n\n\n\n\n5. Add APP_KEY and APP_SECRET to info.plist\n\n\n5.1\n Open info.plist as a Source file\n\n\n\n\n5.2\n Take \nAPP_KEY\n and \nAPP_SECRET\n keys from Step 3 \n\"Add Jeapie sdk to your Mobile Application\"\n in Jeapie Dashboard.\n\n\n\n\n5.3\n Paste xml into info.plist\n\n\nkey\nJeapie\n/key\n\n\ndict\n\n    \nkey\nAPP_KEY\n/key\n\n    \nstring\n{PASTE_APP_KEY_FROM_JEAPIE_DASHBOARD}\n/string\n\n    \nkey\nAPP_SECRET\n/key\n\n    \nstring\n{PASTE_APP_SECRET_FROM_JEAPIE_DASHBOARD}\n/string\n\n\n/dict\n\n\n\n\n\n\n\n6. Import Jeapie header file to AppDelegate.m\n\n\n#import \njeapie/JBJeapieAPIService.h\n\n\n\n\n\nWarning!\n \nWarning! The path to JBJeapieAPIService.h depends on the location of jeapie folder in your project.\n\n\n7. Add a couple of lines to AppDelegate.m\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { \n\n    // Enable Push notification   \n    // support iOS7 and iOS8 push notifications\n    if ([application respondsToSelector:@selector(registerUserNotificationSettings:)]) {\n        UIUserNotificationSettings* notificationSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound categories:nil];\n        [[UIApplication sharedApplication] registerUserNotificationSettings:notificationSettings];\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n    } else {\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes: (UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert)];\n    }\n\n    // track push open\n    NSDictionary* userInfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n    if (userInfo) {\n        [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n    }\n\n    return YES;\n}\n\n// get device token\n- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    [[JBJeapieAPIService sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n// track push opens\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n{\n    [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n}",
            "title": "iOS Native SDK Installation"
        },
        {
            "location": "/iOS/iOS-Native-SDK-Installation/#ios-native-sdk-installation",
            "text": "1. Download latest Jeapie iOS sdk from github  https://github.com/Jeapie/jeapie-ios  2. Copy  jeapie  folder into root of your ios mobile app  3. Select \"Build Phases\" and go to \"Link Binary With Libraries\".   You should see jeapie-sdk-x.x.x.a library  4. Add \"-ObjC\" linker flag to \"Other Linker Flags\" in Build Settings   5. Add APP_KEY and APP_SECRET to info.plist  5.1  Open info.plist as a Source file   5.2  Take  APP_KEY  and  APP_SECRET  keys from Step 3  \"Add Jeapie sdk to your Mobile Application\"  in Jeapie Dashboard.   5.3  Paste xml into info.plist  key Jeapie /key  dict \n     key APP_KEY /key \n     string {PASTE_APP_KEY_FROM_JEAPIE_DASHBOARD} /string \n     key APP_SECRET /key \n     string {PASTE_APP_SECRET_FROM_JEAPIE_DASHBOARD} /string  /dict    6. Import Jeapie header file to AppDelegate.m  #import  jeapie/JBJeapieAPIService.h   Warning!   Warning! The path to JBJeapieAPIService.h depends on the location of jeapie folder in your project.  7. Add a couple of lines to AppDelegate.m  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { \n\n    // Enable Push notification   \n    // support iOS7 and iOS8 push notifications\n    if ([application respondsToSelector:@selector(registerUserNotificationSettings:)]) {\n        UIUserNotificationSettings* notificationSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound categories:nil];\n        [[UIApplication sharedApplication] registerUserNotificationSettings:notificationSettings];\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n    } else {\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes: (UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert)];\n    }\n\n    // track push open\n    NSDictionary* userInfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n    if (userInfo) {\n        [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n    }\n\n    return YES;\n}\n\n// get device token\n- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    [[JBJeapieAPIService sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n// track push opens\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n{\n    [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n}",
            "title": "iOS Native SDK Installation"
        },
        {
            "location": "/iOS/iOS-Native-SDK-API/",
            "text": "iOS Native SDK API\n\n\nList of Methods\n\n\n\n\ndidRegisterForRemoteNotificationsWithDeviceToken\n\n\ndidReceiveRemoteNotification\n\n\nsetAlias\n\n\nsetPhone\n\n\nsetEmail\n\n\naddTag\n\n\nsetTags\n\n\nremoveTag\n\n\nremoveTags\n\n\nunsubscribe\n\n\nsubscribe\n\n\nenableGeolocationWithInterval\n\n\ndisableGeolocation\n\n\nsetLocation\n\n\ndeliver\n\n\n\n\nMethods\n\n\ndidRegisterForRemoteNotificationsWithDeviceToken\n\n\nMust be called from \ndidRegisterForRemoteNotificationsWithDeviceToken\n \nand \ndidFinishLaunchingWithOptions\n in \nAppDelegate.m\n. \nRegister device token in Jeapie Dashboard.\n\n\n- (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)data;\n\n\n\n\nParameters\n\n\n\n\nNSData*\n \ndata\n - device token.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    [[JBJeapieAPIService sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n\n\n\n\n\n\n\ndidReceiveRemoteNotification\n\n\nMust be called from \ndidReceiveRemoteNotification\n in \nAppDelegate.m\n. \nTrack open push for statistics.\n\n\n- (void)didReceiveRemoteNotification:(NSDictionary *)userInfo;\n\n\n\n\nParameters\n\n\n\n\nNSDictionary*\n \nuserInfo\n - contains  push information.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    // Get push info\n    NSDictionary* userInfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n\n    if (userInfo) {\n        // track push opening\n        [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n    }\n\n    return YES;\n}\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n{\n    // track push opening\n    [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n}\n\n\n\n\n\n\n\n\nsetAlias\n\n\nSet an alias(user identifier) for each user to target these users.\n\n\n- (void)setAlias:(NSString *)alias;\n\n\n\n\nParameters\n\n\n\n\nNSString*\n \nalias\n - user alias.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] setAlias:@\nuser_identification\n];\n\n\n\n\n\n\n\n\nsetPhone\n\n\nSet a user phone number for additional user targeting.\n\n\n- (void)setPhone:(NSString *)phone;\n\n\n\n\nParameters\n\n\n\n\nNSString*\n \nphone\n - user phone;\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] setPhone:@\n1415111111\n];\n\n\n\n\n\n\n\n\nsetEmail\n\n\nSet a user phone number for additional user targeting.\n\n\n- (void)setEmail:(NSString *)email;\n\n\n\n\nParameters\n\n\n\n\nNSString*\n \nemail\n - user email.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] setEmail:@\nlogin@example.com\n];\n\n\n\n\n\n\n\n\naddTag\n\n\nTags a user based on an app event of your choosing so that later you can \ncreate segments on Jeapie to target these users. \nWe recommend using setTags over addTag if you need to set more than one tag for a user at once.\n\n\n- (void)addTag:(NSString *)tag;\n\n\n\n\nParameters\n\n\n\n\nNSString*\n \ntag\n - tag name.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] addTag:@\ntag_name\n];\n\n\n\n\n\n\n\n\nsetTags\n\n\nTags a user based on an app event of your choosing so later \nyou can create segments on Jeapie to target these users. \nRemove all tags and set new array of tags.\n\n\n- (void)setTags:(NSArray *)tags;\n\n\n\n\nParameters\n\n\n\n\nNSArray*\n \ntags\n - array of tags.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] setTags:@[@\ntag_name1\n, @\ntag_name2\n]];\n\n\n\n\n\n\n\n\nremoveTag\n\n\nDeletes a tag that was previously set for a user with addTag or setTags. \nUse removeAllTags if you need to delete all of them.\n\n\n- (void)removeTag:(NSString *)tag;\n\n\n\n\nParameters\n\n\n\n\nNSString*\n \ntag\n - tag name.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] removeTag:@\ntag_name\n];\n\n\n\n\n\n\n\n\nremoveTags\n\n\nDeletes all tags that were previously set for a user with addTag or setTags.\n\n\n- (void)removeTags;\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] removeTags];\n\n\n\n\n\n\n\n\nunsubscribe\n\n\nUnsubscribe this device from push notifications.\n\n\n- (void)unsubscribe;\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] unsubscribe];\n\n\n\n\n\n\n\n\nsubscribe\n\n\nSubscribe this device to push notifications if it was unsubscribed by \nunsubcribe\n method.\n\n\n- (void)subscribe;\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] subscribe];\n\n\n\n\n\n\n\n\nenableGeolocationWithInterval\n\n\nCollect user coordinates for advanced user targeting. Geolocations collect with custom period in seconds \nwhen mobile application has foreground state.\n\n\nIf you have permission for background geolocation, please use \nsetLocation\n method.\n\n\n- (void)enableGeolocationWithInterval:(NSTimeInterval)interval;\n\n\n\n\nParameters\n\n\n\n\nNSTimeInterval\n \ninterval\n - Interval in seconds. Please use more than 30 sec.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] enableGeolocationWithInterval:30];\n\n\n\n\n\n\n\n\ndisableGeolocation\n\n\nDisable collecting user coordinates.\n\n\n- (void)disableGeolocation;\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] disableGeolocation];\n\n\n\n\n\n\n\n\nsetLocation\n\n\nSave user geolocation to Jeapie for advanced user targeting.\n\n\n- (void)setLocation:(NSArray *)coordinates;\n\n\n\n\nParameters\n\n\n\n\nNSArray *\n \ncoordinates\n - user coordinates.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] setLocation:@[123.21, 321.12]];\n\n\n\n\n\n\n\n\ndeliver\n\n\nTo track the push has been delivered. \nBy default we can't track push notifications and check whether they have been delivered, but we can use this method in specific cases for advanced statistics.\n\n\n- (void)deliver:(NSString *)pushId;\n\n\n\n\nParameters\n\n\n\n\nNSString *\n \npushId\n - 32 symbols push id.\n\n\n\n\nExample\n\n\nObjective-C\n\n\n[[JBJeapieAPIService sharedInstance] deliver:@\naaaaaaaabbbbbbbbccccccccddddddd\n];",
            "title": "iOS Native SDK API"
        },
        {
            "location": "/iOS/iOS-Native-SDK-API/#ios-native-sdk-api",
            "text": "",
            "title": "iOS Native SDK API"
        },
        {
            "location": "/iOS/iOS-Native-SDK-API/#list-of-methods",
            "text": "didRegisterForRemoteNotificationsWithDeviceToken  didReceiveRemoteNotification  setAlias  setPhone  setEmail  addTag  setTags  removeTag  removeTags  unsubscribe  subscribe  enableGeolocationWithInterval  disableGeolocation  setLocation  deliver",
            "title": "List of Methods"
        },
        {
            "location": "/iOS/iOS-Native-SDK-API/#methods",
            "text": "didRegisterForRemoteNotificationsWithDeviceToken  Must be called from  didRegisterForRemoteNotificationsWithDeviceToken   and  didFinishLaunchingWithOptions  in  AppDelegate.m . \nRegister device token in Jeapie Dashboard.  - (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)data;  Parameters   NSData*   data  - device token.   Example  Objective-C  - (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    [[JBJeapieAPIService sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}    didReceiveRemoteNotification  Must be called from  didReceiveRemoteNotification  in  AppDelegate.m . \nTrack open push for statistics.  - (void)didReceiveRemoteNotification:(NSDictionary *)userInfo;  Parameters   NSDictionary*   userInfo  - contains  push information.   Example  Objective-C  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    // Get push info\n    NSDictionary* userInfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n\n    if (userInfo) {\n        // track push opening\n        [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n    }\n\n    return YES;\n}\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n{\n    // track push opening\n    [[JBJeapieAPIService sharedInstance] didReceiveRemoteNotification:userInfo];\n}    setAlias  Set an alias(user identifier) for each user to target these users.  - (void)setAlias:(NSString *)alias;  Parameters   NSString*   alias  - user alias.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] setAlias:@ user_identification ];    setPhone  Set a user phone number for additional user targeting.  - (void)setPhone:(NSString *)phone;  Parameters   NSString*   phone  - user phone;   Example  Objective-C  [[JBJeapieAPIService sharedInstance] setPhone:@ 1415111111 ];    setEmail  Set a user phone number for additional user targeting.  - (void)setEmail:(NSString *)email;  Parameters   NSString*   email  - user email.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] setEmail:@ login@example.com ];    addTag  Tags a user based on an app event of your choosing so that later you can \ncreate segments on Jeapie to target these users. \nWe recommend using setTags over addTag if you need to set more than one tag for a user at once.  - (void)addTag:(NSString *)tag;  Parameters   NSString*   tag  - tag name.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] addTag:@ tag_name ];    setTags  Tags a user based on an app event of your choosing so later \nyou can create segments on Jeapie to target these users.  Remove all tags and set new array of tags.  - (void)setTags:(NSArray *)tags;  Parameters   NSArray*   tags  - array of tags.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] setTags:@[@ tag_name1 , @ tag_name2 ]];    removeTag  Deletes a tag that was previously set for a user with addTag or setTags. \nUse removeAllTags if you need to delete all of them.  - (void)removeTag:(NSString *)tag;  Parameters   NSString*   tag  - tag name.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] removeTag:@ tag_name ];    removeTags  Deletes all tags that were previously set for a user with addTag or setTags.  - (void)removeTags;  Example  Objective-C  [[JBJeapieAPIService sharedInstance] removeTags];    unsubscribe  Unsubscribe this device from push notifications.  - (void)unsubscribe;  Example  Objective-C  [[JBJeapieAPIService sharedInstance] unsubscribe];    subscribe  Subscribe this device to push notifications if it was unsubscribed by  unsubcribe  method.  - (void)subscribe;  Example  Objective-C  [[JBJeapieAPIService sharedInstance] subscribe];    enableGeolocationWithInterval  Collect user coordinates for advanced user targeting. Geolocations collect with custom period in seconds \nwhen mobile application has foreground state.  If you have permission for background geolocation, please use  setLocation  method.  - (void)enableGeolocationWithInterval:(NSTimeInterval)interval;  Parameters   NSTimeInterval   interval  - Interval in seconds. Please use more than 30 sec.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] enableGeolocationWithInterval:30];    disableGeolocation  Disable collecting user coordinates.  - (void)disableGeolocation;  Example  Objective-C  [[JBJeapieAPIService sharedInstance] disableGeolocation];    setLocation  Save user geolocation to Jeapie for advanced user targeting.  - (void)setLocation:(NSArray *)coordinates;  Parameters   NSArray *   coordinates  - user coordinates.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] setLocation:@[123.21, 321.12]];    deliver  To track the push has been delivered.  By default we can't track push notifications and check whether they have been delivered, but we can use this method in specific cases for advanced statistics.  - (void)deliver:(NSString *)pushId;  Parameters   NSString *   pushId  - 32 symbols push id.   Example  Objective-C  [[JBJeapieAPIService sharedInstance] deliver:@ aaaaaaaabbbbbbbbccccccccddddddd ];",
            "title": "Methods"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/",
            "text": "Android Native SDK Overview\n\n\nTo get Jeapie Push Notifications running on Android, follow these two steps:\n\n\nStep 1\n\n\nGenerate a GCM API Key\n\n\nStep 2\n\n\nInstall the Jeapie Android SDK",
            "title": "Android Native SDK Overview"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#android-native-sdk-overview",
            "text": "To get Jeapie Push Notifications running on Android, follow these two steps:",
            "title": "Android Native SDK Overview"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#step-1",
            "text": "Generate a GCM API Key",
            "title": "Step 1"
        },
        {
            "location": "/Android/Android-Native-SDK-Overview/#step-2",
            "text": "Install the Jeapie Android SDK",
            "title": "Step 2"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/",
            "text": "Android - Generating a GCM Push Notification Key\n\n\nConnect your Google Cloud Messenger Android app with Jeapie\n\n\nSTEP 1: Create a Google Project and save the \"Project Number\"\n\n\n1.1\n Create a project at \nhttps://console.developers.google.com/project\n for your app.\n\n\n\n\n1.2\n Select your Project and click on \"Overview\". Your project number should be located on this page.\n\n\n\n\nCopy the \"Project Number\" from this page.\n\n\nYou will need to add it to the source code of your app later when you follow the SDK guide.\n\n\nSTEP 2: Turn on \"Google Cloud Messaging for Android\" API\n\n\n2.\n Under APIs \n auth\nAPIs, search for \"Google Cloud Messaging for Android\". Turn it on.\n\n\n\n\n\n\nSTEP 3: Create and save Server Key\n\n\n3.1\n Under \"APIs \n auth\" \n \"Credentials\", click \"Create new key\".\n\n\n3.2\n Select \"Server key\"\n\n\n\n\n\n\n3.3\n Press the \"Create\" button.\n\n\nIMPORTANT\n\n\nDO NOT enter anything into the box.\n\n\n\n\n3.4\n Copy the \"API Key\". You will need it to configure your project using Jeapie\n\n\n\n\nSTEP 4: Configure your Android App using Jeapie\n\n\n4.1\n Log into Jeapie. In the dashboard, select \"Application Settings\" and then press the \"Configure\" button to the right of \"Google Play (GCM)\".\n\n\n\n\n\n\n4.2\n Paste your Google API Key into \"Android key\" field and press Save.\n\n\n\n\nConfiguration for sending Android push notifications is complete!\n\n\nNext step is \nsetting up the Android SDK",
            "title": "Android - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#android-generating-a-gcm-push-notification-key",
            "text": "Connect your Google Cloud Messenger Android app with Jeapie",
            "title": "Android - Generating a GCM Push Notification Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-1-create-a-google-project-and-save-the-project-number",
            "text": "1.1  Create a project at  https://console.developers.google.com/project  for your app.   1.2  Select your Project and click on \"Overview\". Your project number should be located on this page.   Copy the \"Project Number\" from this page.  You will need to add it to the source code of your app later when you follow the SDK guide.",
            "title": "STEP 1: Create a Google Project and save the \"Project Number\""
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-2-turn-on-google-cloud-messaging-for-android-api",
            "text": "2.  Under APIs   auth APIs, search for \"Google Cloud Messaging for Android\". Turn it on.",
            "title": "STEP 2: Turn on \"Google Cloud Messaging for Android\" API"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-3-create-and-save-server-key",
            "text": "3.1  Under \"APIs   auth\"   \"Credentials\", click \"Create new key\".  3.2  Select \"Server key\"    3.3  Press the \"Create\" button.  IMPORTANT  DO NOT enter anything into the box.   3.4  Copy the \"API Key\". You will need it to configure your project using Jeapie",
            "title": "STEP 3: Create and save Server Key"
        },
        {
            "location": "/Android/Android-Generating-a-GCM-Push-Notification-Key/#step-4-configure-your-android-app-using-jeapie",
            "text": "4.1  Log into Jeapie. In the dashboard, select \"Application Settings\" and then press the \"Configure\" button to the right of \"Google Play (GCM)\".    4.2  Paste your Google API Key into \"Android key\" field and press Save.   Configuration for sending Android push notifications is complete!  Next step is  setting up the Android SDK",
            "title": "STEP 4: Configure your Android App using Jeapie"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/",
            "text": "Android Native SDK Installation\n\n\n'Google Play services' \n 'Android Support Library'\n\n\nJeapie requires Google Play services (google-play-services_lib) and Android Support Library v4 (android-support-v4.jar). android-support-v13.jar can be used instead if your project already requires it.\n\n\n1.\n Download the latest \nJeapie Android SDK\n.\n\n\n2.\n Copy *.aar file into the lib folder of your android project.\n\n\n3.\n Set \nsdk filename\n of the *.aar file and \nplay-services\n in gradle.\n\n\ndependencies {\n    compile(name:'jeapie-sdk-x.x.x', ext:'aar')\n    compile 'com.google.android.gms:play-services:6.5.87'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.0.0'\n}\n\nrepositories{\n    flatDir{\n        dirs 'libs'\n    }\n}\n\n\n\n\n4.\n Paste permissions into the \nManifest\n file of your Android project .\n\n\nReplace \n{APP_PACKAGE}\n by your own package.\n\n\n    \nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n    \nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n/\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n    \nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n    \nuses-permission android:name=\nandroid.permission.GET_ACCOUNTS\n/\n\n    \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n/\n\n    \nuses-permission android:name=\ncom.google.android.c2dm.permission.RECEIVE\n/\n\n    \nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n/\n\n    \nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n    \nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n    \nuses-permission android:name=\ncom.google.android.providers.gsf.permission.READ_GSERVICES\n/\n\n\n    \npermission\n            android:name=\n{APP_PACKAGE}.permission.C2D_MESSAGE\n\n            android:protectionLevel=\nsignature\n/\n\n\n    \nuses-permission android:name=\n{APP_PACKAGE}.permission.C2D_MESSAGE\n/\n\n\n\n\n\n\n5.\n Paste configs into the \nManifest\n file of your Anroid project. \n\n\nReplace \n{APP_SECRET}\n and \n{APP_KEY}\n by your own keys from Jeapie dashboard.\n\n\n\nAlso replace  \nA{PROJECT_ID}\n by a project number from your Google Console.\n\nLook \nHow to get project number\n\n\n\n\nNote\n\n\n{PROJECT_NUMBER} value is a number but make sure you prefix it with the letter \n\u201cA\u201d\n as in the example above.\nExample: \"A1111111111\"\n\n\n\n\n\napplication ....\n\n        \nmeta-data\n            android:name=\ncom.jeapie.key\n\n            android:value=\n{APP_KEY}\n/\n\n\n        \nmeta-data\n            android:name=\ncom.jeapie.secret\n\n            android:value=\n{APP_SECRET}\n/\n\n\n        \nmeta-data\n            android:name=\nproject_number\n\n            android:value=\nA{PROJECT_NUMBER}\n/\n\n\n\n        \nreceiver android:name=\ncom.jeapieLib.GCMReceiver\n\n            \nintent-filter\n\n                \naction android:name=\ncom.google.android.c2dm.intent.RECEIVE\n/\n\n                \naction android:name=\ncom.google.android.c2dm.intent.REGISTRATION\n/\n\n                \ncategory android:name=\ncom.jeapieApp\n/\n\n            \n/intent-filter\n\n        \n/receiver\n\n\n        \nreceiver android:name=\ncom.jeapieLib.InternetConnectionReceiver\n\n                  android:exported=\nfalse\n\n            \nintent-filter\n\n                \naction android:name=\nandroid.net.conn.CONNECTIVITY_CHANGE\n/\n\n            \n/intent-filter\n\n        \n/receiver\n\n\n        \nservice android:name=\ncom.jeapieLib.service.EventsSenderService\n\n                 android:exported=\nfalse\n/\n\n\n        \nservice android:name=\ncom.jeapieLib.service.LocationTrackingService\n\n                 android:exported=\nfalse\n/\n\n\n\n/application\n\n\n\n\n\n6.\n Paste the code into \"Launch Activity\"\n\n\nJeapieAPI.init(getApplicationContext());\n\n\n//tracking push opening\nBundle bundle = getIntent().getExtras();\nJeapieAPI.getInstance().trackPushOpen(bundle);\n\n\n\n\n7.\n Now you can use jeapie sdk methods",
            "title": "Android Native SDK Installation"
        },
        {
            "location": "/Android/Android-Native-SDK-Installation/#android-native-sdk-installation",
            "text": "'Google Play services'   'Android Support Library'  Jeapie requires Google Play services (google-play-services_lib) and Android Support Library v4 (android-support-v4.jar). android-support-v13.jar can be used instead if your project already requires it.  1.  Download the latest  Jeapie Android SDK .  2.  Copy *.aar file into the lib folder of your android project.  3.  Set  sdk filename  of the *.aar file and  play-services  in gradle.  dependencies {\n    compile(name:'jeapie-sdk-x.x.x', ext:'aar')\n    compile 'com.google.android.gms:play-services:6.5.87'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.0.0'\n}\n\nrepositories{\n    flatDir{\n        dirs 'libs'\n    }\n}  4.  Paste permissions into the  Manifest  file of your Android project .  Replace  {APP_PACKAGE}  by your own package.       uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE / \n     uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE / \n     uses-permission android:name= android.permission.ACCESS_NETWORK_STATE / \n     uses-permission android:name= android.permission.INTERNET / \n     uses-permission android:name= android.permission.GET_ACCOUNTS / \n     uses-permission android:name= android.permission.WAKE_LOCK / \n     uses-permission android:name= com.google.android.c2dm.permission.RECEIVE / \n     uses-permission android:name= android.permission.READ_PHONE_STATE / \n     uses-permission android:name= android.permission.VIBRATE / \n     uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION / \n     uses-permission android:name= android.permission.ACCESS_FINE_LOCATION / \n     uses-permission android:name= com.google.android.providers.gsf.permission.READ_GSERVICES / \n\n     permission\n            android:name= {APP_PACKAGE}.permission.C2D_MESSAGE \n            android:protectionLevel= signature / \n\n     uses-permission android:name= {APP_PACKAGE}.permission.C2D_MESSAGE /   5.  Paste configs into the  Manifest  file of your Anroid project.   Replace  {APP_SECRET}  and  {APP_KEY}  by your own keys from Jeapie dashboard.  Also replace   A{PROJECT_ID}  by a project number from your Google Console. \nLook  How to get project number   Note  {PROJECT_NUMBER} value is a number but make sure you prefix it with the letter  \u201cA\u201d  as in the example above.\nExample: \"A1111111111\"   application .... \n         meta-data\n            android:name= com.jeapie.key \n            android:value= {APP_KEY} / \n\n         meta-data\n            android:name= com.jeapie.secret \n            android:value= {APP_SECRET} / \n\n         meta-data\n            android:name= project_number \n            android:value= A{PROJECT_NUMBER} / \n\n\n         receiver android:name= com.jeapieLib.GCMReceiver \n             intent-filter \n                 action android:name= com.google.android.c2dm.intent.RECEIVE / \n                 action android:name= com.google.android.c2dm.intent.REGISTRATION / \n                 category android:name= com.jeapieApp / \n             /intent-filter \n         /receiver \n\n         receiver android:name= com.jeapieLib.InternetConnectionReceiver \n                  android:exported= false \n             intent-filter \n                 action android:name= android.net.conn.CONNECTIVITY_CHANGE / \n             /intent-filter \n         /receiver \n\n         service android:name= com.jeapieLib.service.EventsSenderService \n                 android:exported= false / \n\n         service android:name= com.jeapieLib.service.LocationTrackingService \n                 android:exported= false /  /application   6.  Paste the code into \"Launch Activity\"  JeapieAPI.init(getApplicationContext());\n\n\n//tracking push opening\nBundle bundle = getIntent().getExtras();\nJeapieAPI.getInstance().trackPushOpen(bundle);  7.  Now you can use jeapie sdk methods",
            "title": "Android Native SDK Installation"
        },
        {
            "location": "/Websdk/Website-SDK-Overview/",
            "text": "Website SDK Overview\n\n\nTo get Jeapie Push Notifications running on your website, follow these two steps.\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\nThis includes Chrome for Windows, Mac OSX, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.\n\n\n\n\nFollow our \nWebsite SDK HTTPS Installation\n guide if your website uses an HTTPS connection.\n\n\nOr follow our \nWebsite SDK HTTP Installation\n guide if your website is \nNon-HTTPS\n. (Uses an HTTP connection).",
            "title": "Website SDK Overview"
        },
        {
            "location": "/Websdk/Website-SDK-Overview/#website-sdk-overview",
            "text": "To get Jeapie Push Notifications running on your website, follow these two steps.  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+  This includes Chrome for Windows, Mac OSX, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.   Follow our  Website SDK HTTPS Installation  guide if your website uses an HTTPS connection.  Or follow our  Website SDK HTTP Installation  guide if your website is  Non-HTTPS . (Uses an HTTP connection).",
            "title": "Website SDK Overview"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/",
            "text": "Website SDK HTTPS Installation\n\n\nJeapie SDK Installation for Chrome websites (desktop + mobile)\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\n\n\nIncludes Chrome for Windows, Mac OS X, Linux, Chrome OS, and Android. Chrome for iOS is not yet supported.\n\n\n\n\nHTTP and HTTPS\n\n\nIf some of your pages are served via HTTP instead of HTTPS, then you will need to follow our \nHTTP Installation Guide\n instead.\n\n\nIf possible, we encourage you to migrate all your pages to HTTPS first, and then continue using this guide.\n\n\n1. Download the SDK\n\n\n1.1\n Download the latest version of Jeapie Chrome Web SDK after the registration of your site in the  \nJeapie Dashboard\n.\n\n\n1.2\n Copy \npush-worker.js\n and \nmanifest.json\n from \njeapie_sdk_\n directory and paste it into the top-level directory (root folder) of your site.\n\n\n2. Include Required Files\n\n\n2.1\n Link \nhttps://cdn.jeapie.com/jeapiejs/APP_KEY\n and \nmanifest.json\n to each page of your website by adding some code between \nhead\n and \n/head\n tags. Update \nAPP_KEY\n with your Jeapie AppId.  Most likely, you will have to do it just once in the file, which helps to generate a layout of the site. The resulting HTML should look like this:\n\n\nhead\n\n    \nscript src=\nhttps://cdn.jeapie.com/jeapiejs/APP_KEY\n async\n/script\n\n\n/head\n\n\n\n\n\nNow user will see a window asking for permission to receive notifications from your site immediately after opening the page\n\n\n\n\n3. Customize Jeapie (Optional)\n\n\n3.1 Your custom button or event.\n \n\n\nCall \nJeapie.push([\"init\"])\n from a javascript file that is included in every page. Create or use your button and update \nYOUR_CUSTOM_BUTTON_ID\n with your button id\n\n\nvar Jeapie = Jeapie || [];\nJeapie.push([\ninit\n, {\nautoRegister\n:false}]);\n\nwindow.onload = function(){\n    //Replace YOUR_CUSTOM_BUTTON_ID with your button id\n    document.getElementById(\nYOUR_CUSTOM_BUTTON_ID\n).onclick = registerPush;\n\n    function registerPush() {\n        Jeapie.push([\nregisterUserForPush\n, function(success){\n            if (success) {\n                //your custom action\n            }\n        }]);\n    }\n}\n\n\n\n\nThe user will see a window asking for permission to receive notifications from your site immediately after clicking on the button.\n\n\nYou can create your own logic and call \nregisterPush()\n method.\n\n\nImportant\n\n\nYou must keep all the SDK files together. \nhttps://cdn.jeapie.com/jeapiejs/APP_KEY\n, \npush-worker.js\n and \nmanifest.json\n must be placed in the root directory of your site.\n\n\nLink to \nhttps://cdn.jeapie.com/jeapiejs/APP_KEY\n must be added between \nhead\n and \n/head\n tags for every page on your website. Linking files this way allows us to be sure that:\n- any page can subscribe to notifications\n- any page can be opened from a notification (if set)\n- changes to the Google Registration id can be updated\n- session count can be accurately calculated\n\n\nThat's It!\n\n\nThat\u2019s it for now - the setup is complete. See our \nWeb SDK API\n for more functions.",
            "title": "Website SDK HTTPS Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#website-sdk-https-installation",
            "text": "Jeapie SDK Installation for Chrome websites (desktop + mobile)  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+   Includes Chrome for Windows, Mac OS X, Linux, Chrome OS, and Android. Chrome for iOS is not yet supported.   HTTP and HTTPS  If some of your pages are served via HTTP instead of HTTPS, then you will need to follow our  HTTP Installation Guide  instead.  If possible, we encourage you to migrate all your pages to HTTPS first, and then continue using this guide.",
            "title": "Website SDK HTTPS Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#1-download-the-sdk",
            "text": "1.1  Download the latest version of Jeapie Chrome Web SDK after the registration of your site in the   Jeapie Dashboard .  1.2  Copy  push-worker.js  and  manifest.json  from  jeapie_sdk_  directory and paste it into the top-level directory (root folder) of your site.",
            "title": "1. Download the SDK"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#2-include-required-files",
            "text": "2.1  Link  https://cdn.jeapie.com/jeapiejs/APP_KEY  and  manifest.json  to each page of your website by adding some code between  head  and  /head  tags. Update  APP_KEY  with your Jeapie AppId.  Most likely, you will have to do it just once in the file, which helps to generate a layout of the site. The resulting HTML should look like this:  head \n     script src= https://cdn.jeapie.com/jeapiejs/APP_KEY  async /script  /head   Now user will see a window asking for permission to receive notifications from your site immediately after opening the page",
            "title": "2. Include Required Files"
        },
        {
            "location": "/Websdk/Website-SDK-HTTPS-Installation/#3-customize-jeapie-optional",
            "text": "3.1 Your custom button or event.    Call  Jeapie.push([\"init\"])  from a javascript file that is included in every page. Create or use your button and update  YOUR_CUSTOM_BUTTON_ID  with your button id  var Jeapie = Jeapie || [];\nJeapie.push([ init , { autoRegister :false}]);\n\nwindow.onload = function(){\n    //Replace YOUR_CUSTOM_BUTTON_ID with your button id\n    document.getElementById( YOUR_CUSTOM_BUTTON_ID ).onclick = registerPush;\n\n    function registerPush() {\n        Jeapie.push([ registerUserForPush , function(success){\n            if (success) {\n                //your custom action\n            }\n        }]);\n    }\n}  The user will see a window asking for permission to receive notifications from your site immediately after clicking on the button.  You can create your own logic and call  registerPush()  method.  Important  You must keep all the SDK files together.  https://cdn.jeapie.com/jeapiejs/APP_KEY ,  push-worker.js  and  manifest.json  must be placed in the root directory of your site.  Link to  https://cdn.jeapie.com/jeapiejs/APP_KEY  must be added between  head  and  /head  tags for every page on your website. Linking files this way allows us to be sure that:\n- any page can subscribe to notifications\n- any page can be opened from a notification (if set)\n- changes to the Google Registration id can be updated\n- session count can be accurately calculated  That's It!  That\u2019s it for now - the setup is complete. See our  Web SDK API  for more functions.",
            "title": "3. Customize Jeapie (Optional)"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/",
            "text": "Website SDK HTTP Installation\n\n\nJeapie SDK Installation for Chrome websites (desktop + mobile)\n\n\nHTTP vs. HTTPS\n\n\nThis is the guide for using Google Chrome push notifications on websites that have some pages served via HTTP instead of HTTPS.\n\n\nIf you are sure that each page is served only via HTTPS, then you should follow [this guide] (Website-SDK-HTTPS-Installation.md)\n\n\nRequirements\n\n\nW3C Web Push Notifications are currently only supported by Chrome 42+\n\n\n\n\nIncludes Chrome for Windows, Mac OS X, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.\n\n\n\n\n1. Include Required JeapieSDK.js\n\n\n1.1\n Include \nhttps://cdn.jeapie.com/jeapiejs/APP_KEY\n in the the \nhead\n HTML tag of each of your website pages. Update \nAPP_KEY\n with your Jeapie AppId. The best way is to add it to the code that generates the layout for each of your webpages. The resulting HTML should look like this:\n\n\nhead\n\n    \nscript src=\nhttps://cdn.jeapie.com/jeapiejs/c98ddb5b4e54032b1f012127a3c5aec3\n async\n \n/script\n\n\n/head\n\n\n\n\n\n2. Customize Jeapie (Optional)\n\n\n3.1 Init with your custom button or event.\n \n\n\nCall \nJeapie.push([\"init\"])\n from a javascript file that is included in every page. Create or use your button and update \nYOUR_CUSTOM_BUTTON_ID\n with your button id.\n\n\nvar Jeapie = Jeapie || [];\nJeapie.push([\ninit\n, {\nautoRegister\n:false}]);\n\nwindow.onload = function() {\n    //Replace YOUR_CUSTOM_BUTTON_ID with your button id\n    document.getElementById(\nYOUR_CUSTOM_BUTTON_ID\n).onclick = registerPush;\n\n    function registerPush() {\n        Jeapie.push([\nregisterHttp\n);\n    }\n}\n\n\n\n\n\nThat's It!\n\n\nThat\u2019s it for now - the setup is complete. See our \nWeb SDK API\n for more functions and \nour examples\n on our Github page.",
            "title": "Website SDK HTTP Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#website-sdk-http-installation",
            "text": "Jeapie SDK Installation for Chrome websites (desktop + mobile)  HTTP vs. HTTPS  This is the guide for using Google Chrome push notifications on websites that have some pages served via HTTP instead of HTTPS.  If you are sure that each page is served only via HTTPS, then you should follow [this guide] (Website-SDK-HTTPS-Installation.md)  Requirements  W3C Web Push Notifications are currently only supported by Chrome 42+   Includes Chrome for Windows, Mac OS X, Linux, Chrome OS and Android. Chrome for iOS is not yet supported by Google.",
            "title": "Website SDK HTTP Installation"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#1-include-required-jeapiesdkjs",
            "text": "1.1  Include  https://cdn.jeapie.com/jeapiejs/APP_KEY  in the the  head  HTML tag of each of your website pages. Update  APP_KEY  with your Jeapie AppId. The best way is to add it to the code that generates the layout for each of your webpages. The resulting HTML should look like this:  head \n     script src= https://cdn.jeapie.com/jeapiejs/c98ddb5b4e54032b1f012127a3c5aec3  async   /script  /head",
            "title": "1. Include Required JeapieSDK.js"
        },
        {
            "location": "/Websdk/Website-SDK-HTTP-Installation/#2-customize-jeapie-optional",
            "text": "3.1 Init with your custom button or event.    Call  Jeapie.push([\"init\"])  from a javascript file that is included in every page. Create or use your button and update  YOUR_CUSTOM_BUTTON_ID  with your button id.  var Jeapie = Jeapie || [];\nJeapie.push([ init , { autoRegister :false}]);\n\nwindow.onload = function() {\n    //Replace YOUR_CUSTOM_BUTTON_ID with your button id\n    document.getElementById( YOUR_CUSTOM_BUTTON_ID ).onclick = registerPush;\n\n    function registerPush() {\n        Jeapie.push([ registerHttp );\n    }\n}  That's It!  That\u2019s it for now - the setup is complete. See our  Web SDK API  for more functions and  our examples  on our Github page.",
            "title": "2. Customize Jeapie (Optional)"
        },
        {
            "location": "/Websdk/Website-SDK-API/",
            "text": "Website SDK API\n\n\nJavaScript Async\n\n\nThe example assumes that you have the following code placed defined before calling Jeapie functions:\n\n\nscript src=\nhttps://cdn.jeapie.com/jeapiejs/APP_KEY\n async\n/script\n\n\nscript\nvar Jeapie = Jeapie || [];\n/script\n\n\n\n\n\nUpdate \nAPP_KEY\n with your Jeapie AppId.\n\n\nList of Functions\n\n\n\n\ninit\n\n\nregisterUserForPush\n\n\naddTag\n\n\nsetTags\n\n\nremoveTag\n\n\nremoveAllTags\n\n\nsetAlias\n\n\ngetSubscription\n\n\n\n\nFunctions\n\n\ninit\n\n\nThis is the only required method that you need to call for setting up Jeapie to receive push notifications. Call it from each page of your site.\n\n\n\n\nParameters\n\n\nJSON\n \noptions\n\n\nBoolean\n \nautoRegister (Optional)\n - Automatically show browser prompt to accept notifications. You can pass in \"false\" to delay this pop-up and then call \nregisterUserForPush\n to prompt them later.\n\n\nBoolean\n \ncreateButton (Optional)\n -  It creates a default button that generates a window for receipt of the notifications, which appears after clicking\n\n\nString\n \ntooltipText (Optional, use only with createButton)\n - Default \nOne click subscription to our newsletter!\n. Set the text that will be shown to users on a default button.\n\n\n\n\nExample\n\n\n\nvar Jeapie = Jeapie || [];\n\nJeapie.push([\ninit\n, {\nautoRegister\n:false}]);\n\n\n\n\nregisterUserForPush\n\n\nCall it when you want to prompt the user to accept push notifications. Only call if you set \"false\" in \nautoRegister:\n when called \"init\".\n\n\nExample\n\n\nJeapie.push([\nregisterUserForPush\n, callback]);\n\n\n\n\naddTag\n\n\nTags a user based on an app event of your choosing so that later you can create segments on \njeapie.com\n to target these users. Recommend using setTags over addTag if you need to set more than one tag on a user at a time.\n\n\n\n\nParameters\n\n\nstring\n \nvalue\n - Value to set.\n\n\n\n\nExample\n\n\nJeapie.push([\naddTag\n, \nvalue\n]);\n\n\n\n\nsetTags\n\n\nTag a user based on an app event of your choosing so later you can create segments on \njeapie.com\n to target these users.\n\n\n\n\nParameters\n\n\nJSON\n \nvalues\n - Values of your choosing to create.\n\n\n\n\nExample\n\n\nJeapie.push([\nsetTags\n, [\nvalue1\n, \nvalue2\n] ]);\n\n\n\n\nremoveTag\n\n\nDeletes a tag that was previously set for a user with \naddTag\n or \nsetTags\n. Use \nremoveAllTags\n if you need to delete all of them.\n\n\n\n\nParameters\n\n\nString\n \nvalue\n - Value to remove.\n\n\n\n\nExample\n\n\nJeapie.push([\nremoveTag\n, \nvalue\n]);\n\n\n\n\nremoveAllTags\n\n\nDeletes all tags that were previously set for a user with \naddTag\n or \nsetTags\n.\n\n\nExample\n\n\nJeapie.push([\nremoveAllTags\n]);\n\n\n\n\nsetAlias\n\n\nSet a alias(user identifier) for each user of \njeapie.com\n to target these users. \n\n\n\n\nParameters\n\n\nstring\n \nvalue\n - Value to set.\n\n\n\n\nExample\n\n\nJeapie.push([\nsetAlias\n, \nvalue\n]);\n\n\n\n\ngetSubscription\n\n\nLets you retrieve the Google Registration ID. Your handler is called after the device is successfully registered with Jeapie.\n\n\nExample\n\n\nJeapie.push([\ngetSubscription\n, function (subscriptionId) {\n    if (subscriptionId) {\n        console.log(subscriptionId);\n    }\n}]);",
            "title": "Website SDK API"
        },
        {
            "location": "/Websdk/Website-SDK-API/#website-sdk-api",
            "text": "JavaScript Async  The example assumes that you have the following code placed defined before calling Jeapie functions:  script src= https://cdn.jeapie.com/jeapiejs/APP_KEY  async /script  script var Jeapie = Jeapie || []; /script   Update  APP_KEY  with your Jeapie AppId.",
            "title": "Website SDK API"
        },
        {
            "location": "/Websdk/Website-SDK-API/#list-of-functions",
            "text": "init  registerUserForPush  addTag  setTags  removeTag  removeAllTags  setAlias  getSubscription",
            "title": "List of Functions"
        },
        {
            "location": "/Websdk/Website-SDK-API/#functions",
            "text": "init  This is the only required method that you need to call for setting up Jeapie to receive push notifications. Call it from each page of your site.   Parameters  JSON   options  Boolean   autoRegister (Optional)  - Automatically show browser prompt to accept notifications. You can pass in \"false\" to delay this pop-up and then call  registerUserForPush  to prompt them later.  Boolean   createButton (Optional)  -  It creates a default button that generates a window for receipt of the notifications, which appears after clicking  String   tooltipText (Optional, use only with createButton)  - Default  One click subscription to our newsletter! . Set the text that will be shown to users on a default button.   Example  \nvar Jeapie = Jeapie || [];\n\nJeapie.push([ init , { autoRegister :false}]);  registerUserForPush  Call it when you want to prompt the user to accept push notifications. Only call if you set \"false\" in  autoRegister:  when called \"init\".  Example  Jeapie.push([ registerUserForPush , callback]);  addTag  Tags a user based on an app event of your choosing so that later you can create segments on  jeapie.com  to target these users. Recommend using setTags over addTag if you need to set more than one tag on a user at a time.   Parameters  string   value  - Value to set.   Example  Jeapie.push([ addTag ,  value ]);  setTags  Tag a user based on an app event of your choosing so later you can create segments on  jeapie.com  to target these users.   Parameters  JSON   values  - Values of your choosing to create.   Example  Jeapie.push([ setTags , [ value1 ,  value2 ] ]);  removeTag  Deletes a tag that was previously set for a user with  addTag  or  setTags . Use  removeAllTags  if you need to delete all of them.   Parameters  String   value  - Value to remove.   Example  Jeapie.push([ removeTag ,  value ]);  removeAllTags  Deletes all tags that were previously set for a user with  addTag  or  setTags .  Example  Jeapie.push([ removeAllTags ]);  setAlias  Set a alias(user identifier) for each user of  jeapie.com  to target these users.    Parameters  string   value  - Value to set.   Example  Jeapie.push([ setAlias ,  value ]);  getSubscription  Lets you retrieve the Google Registration ID. Your handler is called after the device is successfully registered with Jeapie.  Example  Jeapie.push([ getSubscription , function (subscriptionId) {\n    if (subscriptionId) {\n        console.log(subscriptionId);\n    }\n}]);",
            "title": "Functions"
        },
        {
            "location": "/API/Server-API-Overview/",
            "text": "Server API Overview\n\n\nThe Jeapie Server API serves purpose of programmatically delivering notifications from your server to user\u2019s device or from one mobile device to another.\n\n\nAuthentication\n\n\nAPI requests are identified using \nHTTP basic authentication\n.\n\nUse the application key (\n\"APP_KEY\"\n) as your username.\n\nUse the application secret (\n\"APP_SECRET\"\n) as your password.\n\n\nYou can find API key of your mobile/web application here:\n\n\n\nCode example\n\n\n// via shell\n// example APP_KEY = 1e26f7bb3f81e1ab789d3e20b9cf6325\n// example APP_SECRET = 9bb59fcbff38b85647c421c65cca06ce\ncurl -X \\\n    -u \n1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce\n \\\n    -H \nContent-Type: application/json\n \\\n    https://go.jeapie.com/api/v2/push.json\n\n// or\ncurl -X \\\n    -u \n1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce\n \\\n    -H \nContent-Type: application/json\n \\\n    https://go.jeapie.com/api/v2/push.json",
            "title": "Server API Overview"
        },
        {
            "location": "/API/Server-API-Overview/#server-api-overview",
            "text": "The Jeapie Server API serves purpose of programmatically delivering notifications from your server to user\u2019s device or from one mobile device to another.",
            "title": "Server API Overview"
        },
        {
            "location": "/API/Server-API-Overview/#authentication",
            "text": "API requests are identified using  HTTP basic authentication . \nUse the application key ( \"APP_KEY\" ) as your username. \nUse the application secret ( \"APP_SECRET\" ) as your password.  You can find API key of your mobile/web application here:  Code example  // via shell\n// example APP_KEY = 1e26f7bb3f81e1ab789d3e20b9cf6325\n// example APP_SECRET = 9bb59fcbff38b85647c421c65cca06ce\ncurl -X \\\n    -u  1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce  \\\n    -H  Content-Type: application/json  \\\n    https://go.jeapie.com/api/v2/push.json\n\n// or\ncurl -X \\\n    -u  1e26f7bb3f81e1ab789d3e20b9cf6325:9bb59fcbff38b85647c421c65cca06ce  \\\n    -H  Content-Type: application/json  \\\n    https://go.jeapie.com/api/v2/push.json",
            "title": "Authentication"
        },
        {
            "location": "/API/notifications-Create-Notification/",
            "text": "api/v2/push.json Send Push Notification via API\n\n\nEndpoint\n\n\nhttps://go.jeapie.com/api/v2/push.json\n\n\nMethod\n\n\nPost\n\n\nAuthentication\n\n\nClick the following link to read about \nJeapie authentication\n.\n\n\nFull example for Mobile platforms\n\n\n    {\n        // This params are cross-platform for all platforms\n        \nsend_date\n:\nnow\n, // or UNIX_TIME. Optional\n        \nmessage\n: \npush text\n,   // Required\n        \ndata\n:{\nkey\n: \nvalue\n}, // Optional\n        \nplatforms\n: [\nandroid\n, \nios\n], // Optional\n        \nbadge\n: \ninc\n, or number [0-999] // Optional\n        \ndefault_sound\n: 1, // Optional\n        \nttl\n: 3600, // Optional\n\n        // Android additional settings. Optional\n        \nandroid\n: {\n            \nsound\n : \nsoundfile\n,\n            \nheader\n:\nheader\n,\n            \nicon\n: \nicon\n,\n            \ncustom_icon\n: \nhttp://example.com/image.png\n,\n            \nbanner\n: \nhttp://example.com/banner.png\n\n        },\n\n        // iOS (in development). Optional\n        \nios\n: {\n            \nbadge\n: 5,\n            \nsound\n: \nfile.wav\n, // or \ndefault\n\n            \ncategory_id\n: \n1\n, // iOS new feature\n            \ncontent-available\n: 1\n        },\n\n        // Send to all devices\n        \naudience\n: {\n            \nall\n: 1 // send to all devices\n        }\n    }\n\n\n\n\nFull example for Web platforms\n\n\n{\n        // This params are cross-platform for all platforms\n        \nsend_date\n:\nnow\n, // or UNIX_TIME. Optional\n        \nmessage\n: \npush text\n,  // Required\n        \nplatforms\n: [\nchrome\n, \nsafari\n], // Optional\n        \nttl\n: 3600, // Optional\n\n        // Safari related (in development). Optional\n        \nsafari\n: { \n            \ntitle\n: \nTitle\n,\n            \naction\n: \nClick here\n,\n            \naction_url\n: \nhttp://example.com\n,\n            \nttl\n: 3600\n        },\n\n        // Chrome related (in development). Optional\n        \nchrome\n: {\n            \nheader\n: \ntitle example\n,\n            \nicon\n: \nhttp://example.com/icon.png\n,\n            \nredirect_url\n: \n/example.html\n // Default\n        },\n\n\n        // you should use only one of this params\n        \naudience\n: {\n            \nall\n: 1 // send to all devices\n        }\n    }\n\n\n\n\nDescription of the params\n\n\nCross-platform params\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsend_date\n \nOptional\n\n\nMixed\n: String or Int \n \ndefault:\n \n\"now\"\n\n\n\n\n\n\n\n\nTime for scheduled push. Can be \"now\" or UNIX_TIME \n Example: \n \n\"send_date\": \"now\"\n or \n\"send_date\": 1430568855\n\n\n\n\n\n\nmessage\n \nRequired\n\n\nString\n \n \nRequired unless content_available=true\n\n\n\n\n\n\n\n\nPush text. Example: \n \n\"message\": \"hello, world\"\n\n\n\n\n\n\ndata\n \nOptional\n\n\nHash\n\n\n\n\n\n\n\n\nExtra data for push. Can contain additional data for for processing within the application. Example: \n \n\"data\": {\"page\": 1, \"url\": \"http://example.com}\"\n\n\n\n\n\n\nbadge\n \nOptional\n\n\nMixed\n: String or Int\n\n\n\n\n\n\n\n\nOnly for iphone and windows phone. For setting badge number use int, for incrementing badge number use \"inc\". Example: \n \n\"badge\": 3\n or \n\"badge\": \"inc\"\n\n\n\n\n\n\nplatforms\n \nOptional\n\n\nArray\n \n List of mobile platforms: \"android\" \n List of web platforms: \"chrome\", \"safari\"\n\n\n\n\n\n\n\n\nList of platforms. Example: \n if mobile platforms: \n\"platforms\": [\"android\", \"ios\"]\n \n or if web platforms: \n\"platforms\": [\"chrome\", \"safari\"]\n\n\n\n\n\n\ndefault_sound\n \nOptional\n\n\nInt\n: \n0\n or \n1\n \n \ndefault:\n \n0\n\n\n\n\n\n\n\n\nIf you need default sound set \n1\n else \n0\n. Example: \n \n\"default_sound\": 1\n\n\n\n\n\n\nttl\n \nOptional\n\n\nInt\n \n \ndefault:\n \n3600\n\n\n\n\n\n\n\n\n\"Time to live\" parameter - the maximum lifespan of a message in seconds. \nExample: \n\"ttl\":3600\n\n\n\n\n\n\n\n\nAndroid params \n(All params are optional)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsound\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nSound file name in the \"res/raw\" folder, do not include the extension. \n Example: \n\"sound\": \"taff\"\n\n\n\n\n\n\nheader\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nAndroid notification header. \nExample: \n\"header\": \"Header text\"\n\n\n\n\n\n\nicon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nIcon file name in the \"res/drawable\" folder. \nExample: \n\"icon\":\"icon.png\"\n\n\n\n\n\n\ncustom_icon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nFull path to icon file (http url) \nExample: \n\"custom_icon\": \"http://example.com/icon.png\"\n\n\n\n\n\n\nbanner\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nFull path to banner file (http url) \nExample: \n\"banner\": \"http://example.com/banner.png\"\n\n\n\n\n\n\n\n\nChrome params \n(All params are optional)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nChrome notification header. \nExample: \n\"header\": \"Header text\"\n\n\n\n\n\n\nicon\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nFull path to icon file (http url \nExample: \n\"icon\": \"http://example.com/icon.png\"\n\n\n\n\n\n\nredirect_url\n \nOptional\n\n\nString\n\n\n\n\n\n\n\n\nThe relative url which is opened after clicking on a push. \nExample: \n\"redirect_url\": \"/example.html\"\n\n\n\n\n\n\n\n\niOS params \n(In development)\n\n\nSafari params \n(In development)\n\n\nAudience \n(Required)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nall\n\n\nInt\n\n\n\n\n\n\n\n\nsend to all devices. \n Example: \n\"all\": 1\n\n\n\n\n\n\ntokens\n\n\nArray\n\n\n\n\n\n\n\n\nSend to array of device (browser) tokens. Limit is 100 tokens. Example: \n \n\"tokens\": [\"dec301908b9ba...8df85e57a58e40f96f\", \"523f4c2068674f1fe...2ba25cdc250a2a41\"]\n\n\n\n\n\n\naliases\n\n\nArray\n\n\n\n\n\n\n\n\nArray of device aliases set by sdk in mobile app or on web. Example: \n \n\"aliases\": [\"own_id_device_1\", \"own_id_device_2\", \"own_id_device_3\"]\n\n\n\n\n\n\n\n\nResult Format\n\n\n\n\n200 OK\n\n\n\n\n{\n    \nid\n:\n55704a589e31ab441e8b4569\n,\n    \nstatus\n:\ncompleted\n,\n    \nmessage\n:\ntest\n,\n    \nextra_data\n:[],\n    \nplatforms\n:\nAndroid\n,\n    \nbadge\n:\ninc\n,\n    \ndefault_sound\n:\n1\n,\n    \nttl\n:3600\n}\n\n\n\n\nShell Code Examples\n\n\nSend push to all platforms and all devices immediately:\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \ntest\n,\n        \naudience\n: {\n            \nall\n: 1\n        }\n     }' \\\n     https://go.jeapie.com/api/v2/push.json\n\n\n\n\nSend push only to android devices with aliases setted in mobile app:\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \ntest\n,\n        \nplatforms\n: [\nandroid\n],\n        \nandroid\n: {\n            \nheader\n: \ntitle\n\n        },\n        \naudience\n: {\n            \naliases\n: [\nsome_id1\n, \nsome_id2\n, \nemail@example.com\n]\n        }\n     }' \\\n     https://go.jeapie.com/api/v2/push.json\n\n\n\n\nSend push to Chrome and redirect to page after clicking on push\n\n\ncurl -X POST \\\n     -H \nContent-Type: application/json\n \\\n     -u \nAPP_KEY:APP_SECRET\n \\\n     --data '{\n        \nmessage\n: \nPush message\n,\n        \nplatforms\n: [\nchrome\n],\n        \nchrome\n: {\n            \nheader\n: \ntitle message\n,\n            \nicon\n: \nhttp://example.com/icon.png\n,\n            \nredirect_url\n: \n/relative_url.html\n\n        },\n        \naudience\n: {\n            \nall\n: 1\n        }\n     }' \\\n     https://go.jeapie.com/api/v2/push.json\n\n\n\n\n// auth\n$APP_KEY    = '{paste_app_key_from_dashboard}';\n$APP_SECRET = '{paste_app_secret_from_dashboard}';\n\n//data\n$pushData = [\n    'message' =\n 'Push message',\n    'chrome' =\n [\n        'header' =\n 'push title',\n        'icon' =\n 'http://example.com/icon.png',\n        'redirect_url' =\n 'http://example.com',\n    ],\n    'audience' =\n [\n        'all' =\n 1,\n    ],\n];\n\n$pushDataString = json_encode($pushData);                                                                                \n\n// post json request                                                                                                     \n$ch = curl_init('https://go.jeapie.com/api/v2/push.json'); \ncurl_setopt($ch, CURLOPT_USERPWD, $APP_KEY . \n:\n . $APP_SECRET);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, \nPOST\n);                                                                     \ncurl_setopt($ch, CURLOPT_POSTFIELDS, $pushDataString);                                                                  \ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);    \ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5); \ncurl_setopt($ch, CURLOPT_TIMEOUT, 5);                                                                  \ncurl_setopt($ch, CURLOPT_HTTPHEADER, array(                                                                          \n    'Content-Type: application/json',                                                                                \n    'Content-Length: ' . strlen($pushDataString))                                                                       \n);                                                                                                                   \n\n$result = curl_exec($ch);",
            "title": "Send Push Notification"
        },
        {
            "location": "/API/notifications-Create-Notification/#apiv2pushjson-send-push-notification-via-api",
            "text": "Endpoint  https://go.jeapie.com/api/v2/push.json  Method  Post  Authentication  Click the following link to read about  Jeapie authentication .  Full example for Mobile platforms      {\n        // This params are cross-platform for all platforms\n         send_date : now , // or UNIX_TIME. Optional\n         message :  push text ,   // Required\n         data :{ key :  value }, // Optional\n         platforms : [ android ,  ios ], // Optional\n         badge :  inc , or number [0-999] // Optional\n         default_sound : 1, // Optional\n         ttl : 3600, // Optional\n\n        // Android additional settings. Optional\n         android : {\n             sound  :  soundfile ,\n             header : header ,\n             icon :  icon ,\n             custom_icon :  http://example.com/image.png ,\n             banner :  http://example.com/banner.png \n        },\n\n        // iOS (in development). Optional\n         ios : {\n             badge : 5,\n             sound :  file.wav , // or  default \n             category_id :  1 , // iOS new feature\n             content-available : 1\n        },\n\n        // Send to all devices\n         audience : {\n             all : 1 // send to all devices\n        }\n    }  Full example for Web platforms  {\n        // This params are cross-platform for all platforms\n         send_date : now , // or UNIX_TIME. Optional\n         message :  push text ,  // Required\n         platforms : [ chrome ,  safari ], // Optional\n         ttl : 3600, // Optional\n\n        // Safari related (in development). Optional\n         safari : { \n             title :  Title ,\n             action :  Click here ,\n             action_url :  http://example.com ,\n             ttl : 3600\n        },\n\n        // Chrome related (in development). Optional\n         chrome : {\n             header :  title example ,\n             icon :  http://example.com/icon.png ,\n             redirect_url :  /example.html  // Default\n        },\n\n\n        // you should use only one of this params\n         audience : {\n             all : 1 // send to all devices\n        }\n    }  Description of the params  Cross-platform params           send_date   Optional  Mixed : String or Int    default:   \"now\"     Time for scheduled push. Can be \"now\" or UNIX_TIME   Example:    \"send_date\": \"now\"  or  \"send_date\": 1430568855    message   Required  String     Required unless content_available=true     Push text. Example:    \"message\": \"hello, world\"    data   Optional  Hash     Extra data for push. Can contain additional data for for processing within the application. Example:    \"data\": {\"page\": 1, \"url\": \"http://example.com}\"    badge   Optional  Mixed : String or Int     Only for iphone and windows phone. For setting badge number use int, for incrementing badge number use \"inc\". Example:    \"badge\": 3  or  \"badge\": \"inc\"    platforms   Optional  Array    List of mobile platforms: \"android\"   List of web platforms: \"chrome\", \"safari\"     List of platforms. Example:   if mobile platforms:  \"platforms\": [\"android\", \"ios\"]    or if web platforms:  \"platforms\": [\"chrome\", \"safari\"]    default_sound   Optional  Int :  0  or  1     default:   0     If you need default sound set  1  else  0 . Example:    \"default_sound\": 1    ttl   Optional  Int     default:   3600     \"Time to live\" parameter - the maximum lifespan of a message in seconds.  Example:  \"ttl\":3600     Android params  (All params are optional)           sound   Optional  String     Sound file name in the \"res/raw\" folder, do not include the extension.   Example:  \"sound\": \"taff\"    header   Optional  String     Android notification header.  Example:  \"header\": \"Header text\"    icon   Optional  String     Icon file name in the \"res/drawable\" folder.  Example:  \"icon\":\"icon.png\"    custom_icon   Optional  String     Full path to icon file (http url)  Example:  \"custom_icon\": \"http://example.com/icon.png\"    banner   Optional  String     Full path to banner file (http url)  Example:  \"banner\": \"http://example.com/banner.png\"     Chrome params  (All params are optional)           header   Optional  String     Chrome notification header.  Example:  \"header\": \"Header text\"    icon   Optional  String     Full path to icon file (http url  Example:  \"icon\": \"http://example.com/icon.png\"    redirect_url   Optional  String     The relative url which is opened after clicking on a push.  Example:  \"redirect_url\": \"/example.html\"     iOS params  (In development)  Safari params  (In development)  Audience  (Required)           all  Int     send to all devices.   Example:  \"all\": 1    tokens  Array     Send to array of device (browser) tokens. Limit is 100 tokens. Example:    \"tokens\": [\"dec301908b9ba...8df85e57a58e40f96f\", \"523f4c2068674f1fe...2ba25cdc250a2a41\"]    aliases  Array     Array of device aliases set by sdk in mobile app or on web. Example:    \"aliases\": [\"own_id_device_1\", \"own_id_device_2\", \"own_id_device_3\"]     Result Format   200 OK   {\n     id : 55704a589e31ab441e8b4569 ,\n     status : completed ,\n     message : test ,\n     extra_data :[],\n     platforms : Android ,\n     badge : inc ,\n     default_sound : 1 ,\n     ttl :3600\n}",
            "title": "api/v2/push.json Send Push Notification via API"
        },
        {
            "location": "/API/notifications-Create-Notification/#shell-code-examples",
            "text": "Send push to all platforms and all devices immediately:  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  test ,\n         audience : {\n             all : 1\n        }\n     }' \\\n     https://go.jeapie.com/api/v2/push.json  Send push only to android devices with aliases setted in mobile app:  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  test ,\n         platforms : [ android ],\n         android : {\n             header :  title \n        },\n         audience : {\n             aliases : [ some_id1 ,  some_id2 ,  email@example.com ]\n        }\n     }' \\\n     https://go.jeapie.com/api/v2/push.json  Send push to Chrome and redirect to page after clicking on push  curl -X POST \\\n     -H  Content-Type: application/json  \\\n     -u  APP_KEY:APP_SECRET  \\\n     --data '{\n         message :  Push message ,\n         platforms : [ chrome ],\n         chrome : {\n             header :  title message ,\n             icon :  http://example.com/icon.png ,\n             redirect_url :  /relative_url.html \n        },\n         audience : {\n             all : 1\n        }\n     }' \\\n     https://go.jeapie.com/api/v2/push.json  // auth\n$APP_KEY    = '{paste_app_key_from_dashboard}';\n$APP_SECRET = '{paste_app_secret_from_dashboard}';\n\n//data\n$pushData = [\n    'message' =  'Push message',\n    'chrome' =  [\n        'header' =  'push title',\n        'icon' =  'http://example.com/icon.png',\n        'redirect_url' =  'http://example.com',\n    ],\n    'audience' =  [\n        'all' =  1,\n    ],\n];\n\n$pushDataString = json_encode($pushData);                                                                                \n\n// post json request                                                                                                     \n$ch = curl_init('https://go.jeapie.com/api/v2/push.json'); \ncurl_setopt($ch, CURLOPT_USERPWD, $APP_KEY .  :  . $APP_SECRET);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST,  POST );                                                                     \ncurl_setopt($ch, CURLOPT_POSTFIELDS, $pushDataString);                                                                  \ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);    \ncurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5); \ncurl_setopt($ch, CURLOPT_TIMEOUT, 5);                                                                  \ncurl_setopt($ch, CURLOPT_HTTPHEADER, array(                                                                          \n    'Content-Type: application/json',                                                                                \n    'Content-Length: ' . strlen($pushDataString))                                                                       \n);                                                                                                                   \n\n$result = curl_exec($ch);",
            "title": "Shell Code Examples"
        }
    ]
}